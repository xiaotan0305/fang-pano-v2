{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///pano.min.js","webpack:///webpack/bootstrap 5fdb1a2b5f8225b5530b","webpack:///./src/js/pano.js","webpack:///./src/js/panoCtrl.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","initPanoramaHouse","isOverview","isOnlyPanoramaView","initThreejs","initPanoramaView","initVRCrosshair","isSingleMode","createHotSpots","registerEventListener","showFirstHotSpot","init3DHouse","initLight","createHouse","isLandscape","isLandscapeOrNot","debugLog","setOverviewCameraControllerDistance","setDefaultCameraPosition","showFirstHotSpotAfterLoading","mapWidth","mapHeight","buttongGroupBgHeight","SCREEN_WIDTH","window","innerWidth","SCREEN_HEIGHT","innerHeight","isPhone","checkIsPhone","textureLoader","THREE","TextureLoader","raycaster","Raycaster","mouse","Vector2","scene","Scene","bgGeometry","SphereBufferGeometry","bgMaterial","MeshPhongMaterial","color","specular","side","BackSide","background","Mesh","add","camera","PerspectiveCamera","defaultFov","rotation","reorder","isSwitching","switchTime","sceneSmallHouse","visible","cameraSmallHouse","position","z","sceneOrtho","cameraOrtho","OrthographicCamera","mapGroup","Group","buttonGroup","renderer","WebGLRenderer","antialias","sortObjects","setPixelRatio","setSize","gammaInput","gammaOutput","autoClear","container","appendChild","domElement","openStats","stats","Stats","dom","vrControls","VRControls","vrEffect","StereoEffect","initCameraControl","render","initMap","smallHouseObj","x","hotSpotScale","hotSpotDistance","hotSpotDirection","hotSpotNameDirection","hotSpotNameDistance","houseShapePath","domain","houseId","load","createHUDSprites","hotSpotGroup","hotSpotNameTag","createTextSprite","fontsize","backgroundColor","r","g","b","a","cornerAngle","scale","set","texture","factor","Math","max","houseSize","samllHouseScale","hotSpotGroupScale","switchAutoButtonTexture","switchAutoButtonMaterial","SpriteMaterial","map","switchAutoButton","Sprite","register2DClickEvent","onSwitchAutoButtonClicked","switch2DButtonTexture","switch2DButtonMaterial","switch2DButton","onSwitch2DButtonClicked","switch3DButtonTexture","switch3DButtonMaterial","switch3DButton","onSwitch3DButtonClicked","sectorTexture","sectorMaterial","sectorSprite","material","opacity","lastSectorSpriteRotation","y","hotSpotTexture","hotSpotMaterial","index","allHotSpots","hotSpot","tag","hotSpotSprite","tagName","floorPlanPosition","clone","hotSpotObj","onThumbnailClicked","thumbnailElement","houseShapeMaterial","houseShapeSprite","houseShapeScale","bgTexture","roomIndex","house","Rooms","room","faceIndex","RoomFaces","loadFaceTexture","houseObj","children","buttonGroupBgMaterial","buttonGroupBgSprite","mapBgSprite","onSwitchToOverviewClicked","updateHUDSprites","clickedHotSpot","updateTextSprite","Name","split","switchToMap","mapScale","undefined","sUserAgent","navigator","userAgent","toLowerCase","bIsIpad","match","bIsIphoneOs","bIsMidp","bIsUc7","bIsUc","bIsAndroid","bIsCE","bIsWM","resizeWindow","update","cameraZoomAnimation","updateProjectionMatrix","requestAnimationFrame","isAutoRotate","isAutoButtonPressed","stopAutoPlay","starAutoPlayDelay","setFromCamera","intersects","intersectObjects","clickableObjects2D","length","mouseHoverObj","clear","clearDepth","isEnableVRMode","emulateVRControl","isVREnabled","checkVRIntersect","renderCamera","overviewCameraController","enabled","setViewport","crosshair","RingGeometry","MeshBasicMaterial","transparent","showAllRooms","show","allRooms","isShowThumbnail","thumbnailList","$","thumbnailData","isSelected","onclick","light","AmbientLight","DirectionalLight","multiplyScalar","castShadow","shadow","mapSize","width","height","left","right","top","bottom","far","isZooming","zoomSpeed","OrbitControls","maxPolarAngle","degToRad","minPolarAngle","autoRotate","isOverviewAutoRotate","autoRotateSpeed","enableDamping","dampingFactor","panoramaCameraController","PanoramaControls","materials","push","skyBox","CubeGeometry","MultiMaterial","minFilter","NearestFilter","planeGeometry","PlaneBufferGeometry","planeMaterial","logoPlane","spriteTexture","deltaHeight","CameraHeight","lightTexture","lightGeometry","CylinderGeometry","lightMaterial","depthWrite","DoubleSide","hotSpotNames","hotSpotIndex","HotSpots","hotSpotPosition","Vector3","Position","copy","gameObject","hotSpotName","Type","substring","lastIndexOf","IsSecondFloor","lightObj","lightMeshHeight","registerClickEvent","parent","clickableGroupMaterial","clickableGroup","circleSprite","createHotSpotSprite","feetPlane","contains","hotSpotNameSprite","hotSpotNameSuffix","overviewHotSpotNameSprite","overViewHotSpotNameSuffix","onHotSpotNameClicked","LineBasicMaterial","linewidth","geometry","Geometry","vertices","line","Line","hotSpotLineName","nameLine","aspect","addEventListener","eventHandler","onMouseMove","onOrientionChangeDelay","onOrientionChange","event","switchVRMode","document","getElementById","classList","remove","orientation","preventDefault","clientX","clientWidth","clientY","clientHeight","type","mouseDownTime","Date","getTime","isMouseDown","mouseDownObject","getIntersectObj","mouseUpObject","onClick","autoRotateTimer","clearTimeout","setTimeout","clickableObjects","inetsectObject","touches","pageX","pageY","changedTouches","getVRIntersectObj","intesectObject","previousVRIntersectObj","vrGazeTimer","style","visibility","closeMap","switchToHotSpotViewDiv","zoomInDiv","zoomOutDiv","enterHotSpotTip","switchVRButton","previousCameraPosition","fov","vrModeFov","disposeSkyBoxTexture","showOverviewHotSpotNames","showOverviewHotSpot","isHotSpotClickble","switchToHotSpotView","overviewHotSpotName","hotSpotNameObj","onFirstHotSpotClicked","onLoad","onProgress","onError","console","log","lastClickedHotSpot","cached","imageName","ImagePath","loadCubePanoramaTexture","rootPathPanoBlur","cubeTexture","onPanoramaImageLoad","xhr","onHotSpotClicked","rootPathPanoTile","updateRotation","cameraPosition","Rotation","showVisibleHotSpots","isFirstEnterHotSpotView","urls","loaded","dispose","theta","getHotSpotFromName","switchToOverviewDiv","createThumbnails","firstCubProgress","total","loadedProgress","progressIndex","value","parseInt","progressBar","innerText","text","onResourcesPrepared","visibleHotSpots","VisibleHotSpots","textSprite","distance","distanceTo","scaleX","scaleY","obj","setAutoMode","needAutoMode","targetZoomFov","autoPlayTimer","is3DPrepared","showMap","is3DMode","starAutoPlay","totalPanoramaImageCount","Object3D","roomObj","smallRoomObj","totalRoomFaceCount","houseScale","getHouseSize","roomFace","faceTexturePath","replace","ossHost","loadedTexture","LinearFilter","Width","Height","alphaTest","facePlane","smallFacePlane","onRoomFaceTextureLoading","min","minDistance","maxDistance","cos","sin","defaultCameraPosition","minX","maxX","minY","maxY","minZ","maxZ","face","on3DHousePrepared","fadeOut","getParameterByName","RegExp","exec","location","search","decodeURIComponent","enable","enableVRMode","disableVRMode","stop","vrStartTip","message","isDebugMode","debugTextValue","debugText","parameters","createTextTexture","spriteMaterial","sprite","fontface","borderThickness","borderColor","canvas","createElement","context","getContext","font","textAlign","textBaseline","metrics","measureText","textWidth","fillStyle","strokeStyle","lineWidth","roundRect","fillText","Texture","needsUpdate","ctx","w","h","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","animate","time","now","scale1","sprite1","scale2","sprite2","scale3","sprite3","clickEvent","spriteGroupMaterial","spriteGroup","material1","size","material2","material3","Thumbnail","imagePath","click","isVisible","getThumbnailList","template","clonedThumbnail","appendTo","find","src","thumbnail","instantiateThumbnail","thumbnailPath","needClick","siblings","each","WebGLRenderingContext","e","viewMode","ajax","url","success","data","JSON","parse","title","error","status","tem","ua","M","test","appName","appVersion","splice","innerHTML","onPointDown","isPointDown","onPointerDownPointerX","onPointerDownPointerY","onPointerDownTheta","onPointerDownPhi","phi","onPointMove","scope","onPointUp","onTouchDown","stopPropagation","touchSensitive","onTouchMove","onTouchUp","onMouseDown","onMouseUp","removeEventListener","isAutoPlay","target","radToDeg"],"mappings":"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","file":"pano.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pano\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pano\"] = factory();\n\telse\n\t\troot[\"pano\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pano\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pano\"] = factory();\n\telse\n\t\troot[\"pano\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */,\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar PanoramaControls = __webpack_require__(2);\nvar ossHost = 'http://vrhouse.oss-cn-shanghai.aliyuncs.com/';\nvar domain = 'http://vrhouse.oss-cn-shanghai.aliyuncs.com/';\ndomain = './house/';\nvar stats, openStats = false;\nvar raycaster, mouse;\nvar scene, camera, renderer, textureLoader, background;\nvar sceneOrtho, cameraOrtho;\nvar mapGroup, buttonGroup, sectorSprite, hotSpotNameTag, mouseHoverObj;\nvar hotSpotGroup, houseShapeSprite, mapBgSprite, buttonGroupBgSprite;\nvar mapWidth, mapHeight, mapScale, buttongGroupBgHeight;\nvar zoomSpeed, isZooming, targetZoomFov;\nvar switchTime, switchSpeed = new THREE.Vector3(), rotationSpeed = new THREE.Vector3(), isSwitching, previousCameraRotation;\nvar is3DPrepared = false;\nvar isDebugMode = false;\nvar isMouseDown = false;\nvar lastSectorSpriteRotation;\nvar debugTextValue = '';\nvar switch2D3DButton, switch2DButton, switch3DButton, switchAutoButton, fullScreen3DHouseButton, is3DMode, isAutoButtonPressed = true, isAutoRotate = false;\nvar firstCubProgress = [];\nvar SCREEN_WIDTH, SCREEN_HEIGHT;\nvar sceneSmallHouse, cameraSmallHouse, smallHouseObj, smallBackground;\nvar hotSpotScale, hotSpotDistance, hotSpotDirection, hotSpotNameDirection, hotSpotNameDistance;\nvar container = document.getElementById('vr_house_container');\nvar overViewHotSpotNameSuffix = '_overViewHotSpotName';\nvar hotSpotNameSuffix = '_hotSpotName';\nvar hotSpotLineName = '_hotSpotLine';\nvar house, houseObj;\nvar houseSize;\nvar logoPlane;\nvar clickableObjects = [];\nvar clickableObjects2D = [];\nvar allRooms = [];\nvar allHotSpots = [];\nvar overviewCameraController, panoramaCameraController;\nvar isOverview = true;\nvar skyBox;\nvar isOnlyPanoramaView = false;\nvar previousCameraPosition;\nvar isPhone;\nvar defaultFov = 100;\nvar vrModeFov = 93;\nvar zoomInDiv = document.getElementById('zoomInDiv');\nvar zoomOutDiv = document.getElementById('zoomOutDiv');\nvar switchToOverviewDiv = document.getElementById('switchToOverviewDiv');\nvar switchToHotSpotViewDiv = document.getElementById('switchToHotSpotViewDiv');\nvar switchVRButton = document.getElementById('switchVRButton');\nvar switchFullscreenButton = document.getElementById('switchFullscreenButton');\nvar enterHotSpotTip = document.getElementById('enterHotSpotTip');\nvar vrStartTip = document.getElementById('vrStartTip');\nvar debugText = document.getElementById('debugText');\nvar houseScale = 1;\nvar isFirstEnterHotSpotView = true;\nvar isHotSpotClickble = true;\nvar clickedHotSpot, lastClickedHotSpot;\nvar mouseDownTime;\nvar mouseDownObject;\nvar totalRoomFaceCount = 0;\nvar totalPanoramaImageCount;\nvar isOverviewAutoRotate = true;\nvar isFullscreen = false;\nvar autoRotateTimer;\nvar autoPlayTimer;\nvar vrControls, vrEffect;\nvar crosshair;\nvar isVREnabled = false;\nvar isEnableVRMode = false;\nvar vrGazeTimer;\nvar previousVRIntersectObj;\nvar emulateVRControl = false;\nvar isShowThumbnail = false;\nvar isSingleMode = false;\nvar houseId, rootPathPanoTile, rootPathPanoBlur;\nif (isWebglSupport()) {\n    getHouseViewData();\n} else {\n    var browser = getBrowser();\n    var tip =  true ? '请升级您的浏览器版本' : '请使用win7以上的系统';\n    document.getElementById('loading_tip').innerHTML = tip;\n}\nfunction isWebglSupport() {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n        return false;\n    }\n}\nfunction getBrowser() {\n    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return {\n            name: 'IE',\n            version: tem[1] || ''\n        };\n    }\n    if (M[1] === 'Chrome') {\n        tem = ua.match(/\\bOPR|Edge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: 'Opera',\n                version: tem[1]\n            };\n        }\n    }\n    M = M[2] ? [\n        M[1],\n        M[2]\n    ] : [\n        navigator.appName,\n        navigator.appVersion,\n        '-?'\n    ];\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n    return {\n        name: M[0],\n        version: M[1]\n    };\n}\nfunction getHouseViewData() {\n    houseId = getParameterByName('hid');\n    houseId = '22544f76-25cf-42db-aa44-53f309567dcf';\n    rootPathPanoTile = domain + houseId + '/PanoramaTileImages/';\n    rootPathPanoBlur = domain + houseId + '/PanoramaBlurTileImages/';\n    var viewMode = getParameterByName('mode');\n    if (isDebugMode) {\n        debugText.style.visibility = 'visible';\n        debugLog(debugText.style.visibility);\n    }\n    if (viewMode == 'single') {\n        isShowThumbnail = true;\n        isSingleMode = true;\n    }\n    var url = './house/ViewData.txt';\n    $.ajax({\n        url: url,\n        type: 'GET',\n        success: function success(data) {\n            house = JSON.parse(data);\n            document.title = house.Name + '(极速版)';\n            if (isSingleMode) {\n                if (house.HotSpots.length == 0) {\n                    $('#loading_tip').text('没有全景图片');\n                } else {\n                    initPanoramaHouse();\n                }\n            } else {\n                init3DHouse();\n            }\n        },\n        error: function error(e) {\n            if (e.status == '404') {\n                $('#loading_tip').text('您要浏览的房子不存在');\n            }\n        }\n    });\n}\nfunction initPanoramaHouse() {\n    isOverview = false;\n    isOnlyPanoramaView = true;\n    initThreejs();\n    initPanoramaView();\n    initVRCrosshair();\n    if (!isSingleMode) {\n        createHotSpots();\n    }\n    registerEventListener();\n    showFirstHotSpot();\n}\nfunction init3DHouse() {\n    initThreejs();\n    initLight();\n    initPanoramaView();\n    initVRCrosshair();\n    createHouse();\n    createHotSpots();\n    registerEventListener();\n    var isLandscape = isLandscapeOrNot();\n    debugLog('init3DHouse,isLandscape: ' + isLandscape);\n    setOverviewCameraControllerDistance(isLandscape);\n    setDefaultCameraPosition(isLandscape);\n    showFirstHotSpotAfterLoading();\n}\nfunction initThreejs() {\n    mapWidth = mapHeight = 425;\n    buttongGroupBgHeight = 30;\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    isPhone = checkIsPhone();\n    textureLoader = new THREE.TextureLoader();\n    raycaster = new THREE.Raycaster();\n    mouse = new THREE.Vector2();\n    scene = new THREE.Scene();\n    var bgGeometry = new THREE.SphereBufferGeometry(3000, 1, 1);\n    var bgMaterial = new THREE.MeshPhongMaterial({\n        color: 3948353,\n        specular: 1118481,\n        side: THREE.BackSide\n    });\n    background = new THREE.Mesh(bgGeometry, bgMaterial);\n    scene.add(background);\n    camera = new THREE.PerspectiveCamera(defaultFov, SCREEN_WIDTH / SCREEN_HEIGHT, 0.5, 100000);\n    camera.rotation.reorder('YXZ');\n    scene.add(camera);\n    isSwitching = false;\n    switchTime = 2;\n    if (!isSingleMode) {\n        sceneSmallHouse = new THREE.Scene();\n        sceneSmallHouse.visible = false;\n        cameraSmallHouse = new THREE.PerspectiveCamera(35, mapWidth / mapHeight, 0.5, 100000);\n        cameraSmallHouse.rotation.reorder('YXZ');\n        cameraSmallHouse.position.z = 1;\n        sceneOrtho = new THREE.Scene();\n        sceneOrtho.visible = false;\n        cameraOrtho = new THREE.OrthographicCamera(-SCREEN_WIDTH / 2, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, -SCREEN_HEIGHT / 2, 1, 10);\n        cameraOrtho.position.z = 10;\n        mapGroup = new THREE.Group();\n        sceneOrtho.add(mapGroup);\n        buttonGroup = new THREE.Group();\n        sceneOrtho.add(buttonGroup);\n    }\n    renderer = new THREE.WebGLRenderer();\n    renderer.antialias = true;\n    renderer.sortObjects = false;\n    renderer.setPixelRatio(isPhone ? 4 : 2);\n    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    renderer.autoClear = false;\n    container.appendChild(renderer.domElement);\n    if (openStats) {\n        stats = new Stats();\n        container.appendChild(stats.dom);\n    }\n    vrControls = new THREE.VRControls(camera);\n    vrEffect = new THREE.StereoEffect(renderer);\n    vrEffect.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    initCameraControl();\n    render();\n}\nfunction initMap() {\n    smallHouseObj.rotation.x = 0.5;\n    hotSpotScale = 0.7;\n    hotSpotDistance = -30;\n    hotSpotDirection = -0.5;\n    hotSpotNameDirection = -38 / 13;\n    hotSpotNameDistance = 13;\n    var houseShapePath = domain + houseId + '/FloorPlans/' + houseId + '.png';\n    textureLoader.load(houseShapePath, createHUDSprites);\n    hotSpotGroup = new THREE.Group();\n    hotSpotGroup.visible = false;\n    mapGroup.add(hotSpotGroup);\n    hotSpotNameTag = createTextSprite('', {\n        fontsize: 50,\n        backgroundColor: {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0.498039\n        },\n        cornerAngle: 12\n    });\n    hotSpotNameTag.scale.set(210, 30, 1);\n    hotSpotNameTag.visible = false;\n    hotSpotGroup.add(hotSpotNameTag);\n}\nfunction createHUDSprites(texture) {\n    var factor = 500 / Math.max(houseSize.x, houseSize.z);\n    var samllHouseScale = factor * 0.0011;\n    smallHouseObj.scale.set(samllHouseScale, samllHouseScale, samllHouseScale);\n    var hotSpotGroupScale = factor * 1.1;\n    hotSpotGroup.scale.set(hotSpotGroupScale, hotSpotGroupScale, hotSpotGroupScale);\n    textureLoader.load('src/textures/button_Auto.png');\n    textureLoader.load('src/textures/button_2D_pressed.png');\n    textureLoader.load('src/textures/button_3D_pressed.png');\n    var switchAutoButtonTexture = textureLoader.load('src/textures/button_Auto_pressed.png');\n    var switchAutoButtonMaterial = new THREE.SpriteMaterial({ map: switchAutoButtonTexture });\n    switchAutoButton = new THREE.Sprite(switchAutoButtonMaterial);\n    switchAutoButton.scale.set(50, 25, 1);\n    register2DClickEvent(switchAutoButton, onSwitchAutoButtonClicked);\n    buttonGroup.add(switchAutoButton);\n    var switch2DButtonTexture = textureLoader.load('src/textures/button_2D.png');\n    var switch2DButtonMaterial = new THREE.SpriteMaterial({ map: switch2DButtonTexture });\n    switch2DButton = new THREE.Sprite(switch2DButtonMaterial);\n    switch2DButton.scale.set(40, 25, 1);\n    register2DClickEvent(switch2DButton, onSwitch2DButtonClicked);\n    buttonGroup.add(switch2DButton);\n    var switch3DButtonTexture = textureLoader.load('src/textures/button_3D.png');\n    var switch3DButtonMaterial = new THREE.SpriteMaterial({ map: switch3DButtonTexture });\n    switch3DButton = new THREE.Sprite(switch3DButtonMaterial);\n    switch3DButton.scale.set(40, 25, 1);\n    register2DClickEvent(switch3DButton, onSwitch3DButtonClicked);\n    buttonGroup.add(switch3DButton);\n    var sectorTexture = textureLoader.load('src/textures/sector.png');\n    var sectorMaterial = new THREE.SpriteMaterial({ map: sectorTexture });\n    sectorSprite = new THREE.Sprite(sectorMaterial);\n    sectorSprite.scale.set(100, 100, 1);\n    sectorSprite.material.opacity = 0.5;\n    hotSpotGroup.add(sectorSprite);\n    lastSectorSpriteRotation = camera.rotation.y;\n    var hotSpotTexture = textureLoader.load('src/textures/hotSpotPoint.png');\n    var hotSpotMaterial = new THREE.SpriteMaterial({ map: hotSpotTexture });\n    for (var index in allHotSpots) {\n        var hotSpot = allHotSpots[index].tag;\n        var hotSpotSprite = new THREE.Sprite(hotSpotMaterial);\n        hotSpotSprite.tag = hotSpot;\n        hotSpotSprite.name = allHotSpots[index].tagName;\n        hotSpotSprite.material.opacity = 0.7;\n        hotSpotSprite.scale.set(30, 30, 1);\n        hotSpotSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n        hotSpot.floorPlanPosition = hotSpotSprite.position.clone();\n        register2DClickEvent(hotSpotSprite, function (hotSpotObj) {\n            onThumbnailClicked(hotSpotObj.tag.thumbnailElement, true);\n        });\n        hotSpotGroup.add(hotSpotSprite);\n    }\n    var houseShapeMaterial = new THREE.SpriteMaterial({ map: texture });\n    houseShapeSprite = new THREE.Sprite(houseShapeMaterial);\n    var houseShapeScale = factor * 0.8;\n    houseShapeSprite.scale.set(houseSize.x * houseShapeScale, houseSize.z * houseShapeScale, 1);\n    houseShapeSprite.material.opacity = 0.9;\n    houseShapeSprite.visible = false;\n    mapGroup.add(houseShapeSprite);\n    var bgTexture = textureLoader.load('src/textures/bg.png', function () {\n        sceneOrtho.visible = true;\n        for (var roomIndex in house.Rooms) {\n            var room = house.Rooms[roomIndex];\n            for (var faceIndex in room.RoomFaces) {\n                var roomFace = room.RoomFaces[faceIndex];\n                loadFaceTexture(roomFace, houseObj.children[roomIndex], smallHouseObj.children[roomIndex]);\n            }\n        }\n    });\n    var buttonGroupBgMaterial = new THREE.SpriteMaterial({ map: bgTexture });\n    buttonGroupBgSprite = new THREE.Sprite(buttonGroupBgMaterial);\n    buttonGroupBgSprite.material.opacity = 0.5;\n    buttonGroupBgSprite.material.color = 16777215;\n    buttonGroupBgSprite.scale.set(mapWidth, buttongGroupBgHeight, 1);\n    buttonGroup.add(buttonGroupBgSprite);\n    var material = new THREE.SpriteMaterial({ map: bgTexture });\n    mapBgSprite = new THREE.Sprite(material);\n    mapBgSprite.material.opacity = 0.5;\n    mapBgSprite.material.color = 0;\n    mapBgSprite.scale.set(mapWidth, mapHeight, 1);\n    register2DClickEvent(mapBgSprite, onSwitchToOverviewClicked);\n    mapGroup.add(mapBgSprite);\n    updateHUDSprites();\n    for (var index in allHotSpots) {\n        if (allHotSpots[index].tag == clickedHotSpot) {\n            hotSpotNameTag.position.set(allHotSpots[index].tag.floorPlanPosition.x + hotSpotNameDistance, allHotSpots[index].tag.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n            updateTextSprite(hotSpotNameTag, allHotSpots[index].tag.Name.split('-')[0]);\n            sectorSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n            break;\n        }\n    }\n    switchToMap(true);\n}\nfunction updateHUDSprites() {\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    mapScale = SCREEN_WIDTH / mapWidth * 0.4;\n    if (SCREEN_WIDTH > SCREEN_HEIGHT) {\n        mapScale = SCREEN_HEIGHT / mapHeight * 0.4;\n    }\n    mapGroup.scale.set(mapScale, mapScale, 1);\n    mapGroup.position.set((-SCREEN_WIDTH + mapWidth * mapScale) / 2, (SCREEN_HEIGHT - mapHeight * mapScale) / 2, 1);\n    if (buttonGroupBgSprite != undefined) {\n        buttonGroupBgSprite.scale.set(mapWidth * mapScale, buttongGroupBgHeight, 1);\n        switch3DButton.position.set((mapWidth * mapScale - 25 - 20) / 2, 0, 1);\n        switch2DButton.position.set(switch3DButton.position.x - 45, 0, 1);\n        switchAutoButton.position.set(switch2DButton.position.x - 50, 0, 1);\n    }\n    buttonGroup.position.set((-SCREEN_WIDTH + mapWidth * mapScale) / 2, SCREEN_HEIGHT / 2 - mapHeight * mapScale - buttongGroupBgHeight / 2 - 0.5, 1);\n}\nfunction checkIsPhone() {\n    var sUserAgent = navigator.userAgent.toLowerCase();\n    var bIsIpad = sUserAgent.match(/ipad/i) == 'ipad';\n    var bIsIphoneOs = sUserAgent.match(/iphone os/i) == 'iphone os';\n    var bIsMidp = sUserAgent.match(/midp/i) == 'midp';\n    var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == 'rv:1.2.3.4';\n    var bIsUc = sUserAgent.match(/ucweb/i) == 'ucweb';\n    var bIsAndroid = sUserAgent.match(/android/i) == 'android';\n    var bIsCE = sUserAgent.match(/windows ce/i) == 'windows ce';\n    var bIsWM = sUserAgent.match(/windows mobile/i) == 'windows mobile';\n    var isPhone = bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM;\n    return isPhone;\n}\nfunction render() {\n    if (SCREEN_WIDTH != window.innerWidth || SCREEN_HEIGHT != window.innerHeight) {\n        SCREEN_WIDTH = window.innerWidth;\n        SCREEN_HEIGHT = window.innerHeight;\n        debugLog('R_SCREEN_WIDTH:' + SCREEN_WIDTH);\n        debugLog('R_SCREEN_HEIGHT' + SCREEN_HEIGHT);\n        resizeWindow();\n    }\n    if (openStats) {\n        stats.update();\n    }\n    cameraZoomAnimation();\n    camera.updateProjectionMatrix();\n    requestAnimationFrame(render);\n    for (var index in allHotSpots) {\n        allHotSpots[index].rotation.y = camera.rotation.y;\n    }\n    if (smallHouseObj != undefined && sceneSmallHouse.visible) {\n        if (isAutoRotate) {\n            smallHouseObj.rotation.y -= 0.0025;\n        } else {\n            smallHouseObj.rotation.y = -camera.rotation.y;\n        }\n    }\n    if (houseShapeSprite) {\n        if (lastSectorSpriteRotation != camera.rotation.y && isAutoButtonPressed && !isOverview) {\n            lastSectorSpriteRotation = camera.rotation.y;\n            stopAutoPlay();\n            starAutoPlayDelay();\n            switchToMap(true);\n        }\n        if (houseShapeSprite.visible) {\n            sectorSprite.material.rotation = camera.rotation.y - 0.6;\n            raycaster.setFromCamera(mouse, cameraOrtho);\n            var intersects = raycaster.intersectObjects(clickableObjects2D);\n            if (intersects.length > 0 && intersects[0].object.tag != undefined) {\n                mouseHoverObj = intersects[0].object;\n                hotSpotNameTag.position.set(mouseHoverObj.position.x + hotSpotNameDistance, mouseHoverObj.position.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n                updateTextSprite(hotSpotNameTag, mouseHoverObj.name);\n            } else {\n                if (clickedHotSpot != undefined) {\n                    hotSpotNameTag.position.set(clickedHotSpot.floorPlanPosition.x + hotSpotNameDistance, clickedHotSpot.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n                    updateTextSprite(hotSpotNameTag, clickedHotSpot.Name.split('-')[0]);\n                }\n            }\n        }\n    }\n    renderer.clear();\n    renderer.clearDepth();\n    if (isEnableVRMode) {\n        if (!emulateVRControl) {\n            vrControls.update();\n        }\n        if (isVREnabled) {\n            vrEffect.render(scene, camera);\n            checkVRIntersect();\n        } else {\n            renderCamera();\n        }\n    } else {\n        renderCamera();\n        if (overviewCameraController.enabled) {\n            overviewCameraController.update();\n        }\n    }\n}\nfunction renderCamera() {\n    if (!isSingleMode) {\n        renderer.setViewport(0, SCREEN_HEIGHT - mapHeight * mapScale, mapWidth * mapScale, mapHeight * mapScale);\n        renderer.render(sceneSmallHouse, cameraSmallHouse);\n        renderer.setViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n        renderer.render(scene, camera);\n        renderer.render(sceneOrtho, cameraOrtho);\n    } else {\n        renderer.render(scene, camera);\n    }\n}\nfunction initVRCrosshair() {\n    crosshair = new THREE.Mesh(new THREE.RingGeometry(0.02, 0.04, 32), new THREE.MeshBasicMaterial({\n        color: 16777215,\n        opacity: 0.5,\n        transparent: true\n    }));\n    crosshair.visible = false;\n    crosshair.position.z = -2;\n    camera.add(crosshair);\n}\nfunction showAllRooms(show) {\n    for (var index in allRooms) {\n        allRooms[index].visible = show;\n    }\n    if (show && isShowThumbnail) {\n        var thumbnailList = $('#thumbnail-list').children('#thumbnail');\n        for (var index in thumbnailList) {\n            if (thumbnailList[index].thumbnailData.isSelected) {\n                thumbnailList[index].onclick();\n                break;\n            }\n        }\n    }\n}\nfunction initLight() {\n    var light;\n    scene.add(new THREE.AmbientLight(6710886));\n    light = new THREE.DirectionalLight(14674943, 0.3);\n    light.position.set(0, 200, 0);\n    light.position.multiplyScalar(1.3);\n    light.castShadow = true;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    var d = 300;\n    light.shadow.camera.left = -d;\n    light.shadow.camera.right = d;\n    light.shadow.camera.top = d;\n    light.shadow.camera.bottom = -d;\n    light.shadow.camera.far = 1000;\n    scene.add(light);\n}\nfunction initCameraControl() {\n    isZooming = false;\n    zoomSpeed = 2.5;\n    overviewCameraController = new THREE.OrbitControls(camera, renderer.domElement);\n    overviewCameraController.maxPolarAngle = THREE.Math.degToRad(90);\n    overviewCameraController.minPolarAngle = THREE.Math.degToRad(10);\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n    overviewCameraController.autoRotateSpeed = 1;\n    overviewCameraController.zoomSpeed = 0.5;\n    overviewCameraController.enableDamping = true;\n    overviewCameraController.dampingFactor = 0.8;\n    panoramaCameraController = new PanoramaControls(camera, renderer.domElement);\n    panoramaCameraController.enabled = false;\n}\nfunction initPanoramaView() {\n    var materials = [];\n    for (var i = 0; i < 6; i++) {\n        materials.push(new THREE.MeshBasicMaterial({ side: THREE.BackSide }));\n    }\n    skyBox = new THREE.Mesh(new THREE.CubeGeometry(5000, 5000, 5000), new THREE.MultiMaterial(materials));\n    skyBox.visible = false;\n    background.visible = true;\n    var logoSize = 300;\n    var texture = textureLoader.load('src/textures/logo.png');\n    texture.minFilter = THREE.NearestFilter;\n    var planeGeometry = new THREE.PlaneBufferGeometry(logoSize, logoSize, 1, 1);\n    var planeMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n    });\n    logoPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n    logoPlane.rotation.x = THREE.Math.degToRad(270);\n    logoPlane.position.y = -400;\n    skyBox.add(logoPlane);\n    scene.add(skyBox);\n}\nfunction createHotSpots() {\n    var texture = textureLoader.load('src/textures/hotspot/feet.png');\n    var spriteTexture = textureLoader.load('src/textures/hotspot_sprite.png');\n    texture.minFilter = THREE.NearestFilter;\n    var planeMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n    });\n    var lightMeshHeight = 70;\n    var lightRadius = 12;\n    var hotSpotNameHeight = 40;\n    var deltaHeight = -house.CameraHeight + 4.5;\n    var lightTexture = textureLoader.load('src/textures/hotspot/light.png');\n    lightTexture.minFilter = THREE.NearestFilter;\n    var lightGeometry = new THREE.CylinderGeometry(lightRadius, lightRadius, lightMeshHeight, 30, 1, true);\n    var lightMaterial = new THREE.MeshBasicMaterial({\n        map: lightTexture,\n        transparent: true,\n        depthWrite: false,\n        side: THREE.DoubleSide\n    });\n    var hotSpotNames = [];\n    for (var hotSpotIndex in house.HotSpots) {\n        var hotSpot = house.HotSpots[hotSpotIndex];\n        var hotSpotObj = new THREE.Group();\n        var hotSpotPosition = new THREE.Vector3(hotSpot.Position.x, hotSpot.Position.y + deltaHeight, -hotSpot.Position.z);\n        hotSpotObj.position.copy(hotSpotPosition);\n        scene.add(hotSpotObj);\n        allHotSpots.push(hotSpotObj);\n        hotSpot.gameObject = hotSpotObj;\n        hotSpotObj.tag = hotSpot;\n        var hotSpotName = hotSpot.Name;\n        if (hotSpot.Type == 'Door' && hotSpot.Name.split('-').length > 2) {\n            hotSpotName = hotSpot.Name.substring(0, hotSpot.Name.lastIndexOf('-'));\n        }\n        if (hotSpot.Type == 'Room' && hotSpot.Name.split('-').length > 1) {\n            hotSpotName = hotSpot.Name.split('-')[0];\n        }\n        hotSpotObj.tagName = hotSpotName;\n        hotSpot.IsSecondFloor = hotSpot.Position.y > 100;\n        var lightObj = new THREE.Mesh(lightGeometry, lightMaterial);\n        hotSpotObj.add(lightObj);\n        hotSpotObj.lightObj = lightObj;\n        lightObj.position.set(0, lightMeshHeight / 2, 0);\n        lightObj.name = hotSpot.Name;\n        registerClickEvent(lightObj, function (lightObj) {\n            onThumbnailClicked(lightObj.parent.tag.thumbnailElement, true);\n        });\n        var clickableGroupMaterial = new THREE.SpriteMaterial({ opacity: 0 });\n        var clickableGroup = new THREE.Sprite(clickableGroupMaterial);\n        hotSpotObj.add(clickableGroup);\n        hotSpotObj.clickableGroup = clickableGroup;\n        clickableGroup.position.set(0, lightObj.position.y, 0);\n        var circleSprite = createHotSpotSprite(spriteTexture, hotSpotPosition);\n        clickableGroup.add(circleSprite);\n        circleSprite.position.set(0, 0, 0);\n        circleSprite.visible = false;\n        hotSpotObj.circleSprite = circleSprite;\n        var planeGeometry = new THREE.PlaneBufferGeometry(12, 12, 1, 1);\n        var feetPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n        feetPlane.rotation.x = THREE.Math.degToRad(270);\n        feetPlane.position.y = -lightMeshHeight / 2;\n        lightObj.add(feetPlane);\n        if (hotSpotName.split('-').length > 1 || contains(hotSpotNames, hotSpotName)) {\n            continue;\n        }\n        var hotSpotNameSprite = createTextSprite(hotSpotName, {\n            fontsize: 50,\n            backgroundColor: {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0.498039\n            },\n            cornerAngle: 12\n        });\n        clickableGroup.add(hotSpotNameSprite);\n        hotSpotNameSprite.y = 6;\n        hotSpotNameSprite.position.set(0, hotSpotNameSprite.y, 0);\n        hotSpotNameSprite.name = hotSpot.Name + hotSpotNameSuffix;\n        hotSpotNameSprite.visible = false;\n        hotSpotObj.hotSpotNameSprite = hotSpotNameSprite;\n        hotSpotNames.push(hotSpotName);\n        registerClickEvent(hotSpotNameSprite, function (hotSpotNameSprite) {\n            onThumbnailClicked(hotSpotNameSprite.parent.parent.tag.thumbnailElement, true);\n        });\n        var overviewHotSpotNameSprite = createTextSprite(hotSpotName, {\n            fontsize: 250,\n            backgroundColor: {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0.498039\n            },\n            cornerAngle: 40\n        });\n        hotSpotObj.add(overviewHotSpotNameSprite);\n        overviewHotSpotNameSprite.position.set(0, lightObj.position.y + hotSpotNameHeight, 0);\n        overviewHotSpotNameSprite.name = hotSpot.Name + overViewHotSpotNameSuffix;\n        hotSpotObj.overviewHotSpotNameSprite = overviewHotSpotNameSprite;\n        registerClickEvent(overviewHotSpotNameSprite, onHotSpotNameClicked);\n        var material = new THREE.LineBasicMaterial({\n            color: 32768,\n            linewidth: 1\n        });\n        var geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(0, feetPlane.position.y, 0), new THREE.Vector3(0, lightObj.position.y - 7));\n        var line = new THREE.Line(geometry, material);\n        line.name = hotSpotLineName;\n        hotSpotObj.nameLine = line;\n        lightObj.add(line);\n    }\n}\nfunction resizeWindow() {\n    debugLog('resizeWindow');\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    debugLog('SCREEN_WIDTH:' + SCREEN_WIDTH);\n    debugLog('SCREEN_HEIGHT' + SCREEN_HEIGHT);\n    camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n    camera.updateProjectionMatrix();\n    if (!isSingleMode) {\n        cameraSmallHouse.aspect = mapWidth / mapHeight;\n        cameraSmallHouse.updateProjectionMatrix();\n        cameraOrtho.left = -SCREEN_WIDTH / 2;\n        cameraOrtho.right = SCREEN_WIDTH / 2;\n        cameraOrtho.top = SCREEN_HEIGHT / 2;\n        cameraOrtho.bottom = -SCREEN_HEIGHT / 2;\n        cameraOrtho.updateProjectionMatrix();\n        updateHUDSprites();\n    }\n    if (isVREnabled) {\n        vrEffect.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    } else {\n        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    }\n}\nfunction registerEventListener() {\n    renderer.domElement.addEventListener('touchstart', eventHandler, false);\n    renderer.domElement.addEventListener('touchend', eventHandler, false);\n    renderer.domElement.addEventListener('mousedown', eventHandler, false);\n    renderer.domElement.addEventListener('mouseup', eventHandler, false);\n    window.addEventListener('mousemove', onMouseMove, false);\n    window.addEventListener('orientationchange', onOrientionChangeDelay, false);\n}\nfunction onOrientionChangeDelay() {\n    debugLog('onOrientionChangeDelay');\n    onOrientionChange();\n}\nfunction onOrientionChange(event) {\n    var isLandscape = isLandscapeOrNot();\n    debugLog('onOrientionChange,isLandscape: ' + isLandscape);\n    if (isLandscape == undefined) {\n        return;\n    }\n    setOverviewCameraControllerDistance(isLandscape);\n    if (isEnableVRMode) {\n        if (isLandscape) {\n            if (!isVREnabled) {\n                switchVRMode(true);\n            }\n        } else {\n            if (isVREnabled) {\n                switchVRMode(false);\n            }\n        }\n    }\n    var thumbnailList = document.getElementById('thumbnail-list');\n    if (isLandscape) {\n        for (var index in thumbnailList.children) {\n            thumbnailList.children[index].classList.remove('col-xs-3');\n            thumbnailList.children[index].classList.add('col-xs-2');\n        }\n    } else {\n        for (var index in thumbnailList.children) {\n            thumbnailList.children[index].classList.remove('col-xs-2');\n            thumbnailList.children[index].classList.add('col-xs-3');\n        }\n    }\n}\nfunction isLandscapeOrNot() {\n    var isLandscape;\n    if (window.orientation == 180 || window.orientation == 0) {\n        isLandscape = false;\n    } else if (window.orientation == 90 || window.orientation == -90) {\n        isLandscape = true;\n    }\n    return isLandscape;\n}\nfunction onMouseMove(event) {\n    event.preventDefault();\n    mouse.x = event.clientX / renderer.domElement.clientWidth * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n}\nfunction eventHandler(event) {\n    if (event.type == 'touchstart' || event.type == 'mousedown') {\n        mouseDownTime = new Date().getTime();\n        isMouseDown = true;\n        if (!isSingleMode) {\n            mouseDownObject = getIntersectObj(event);\n        }\n        if (isOverview) {\n            overviewCameraController.autoRotate = false;\n        } else {\n        }\n    } else if (event.type == 'touchend' || event.type == 'mouseup') {\n        isMouseDown = false;\n        if (new Date().getTime() - mouseDownTime < 200 && !isSingleMode) {\n            var mouseUpObject = getIntersectObj(event);\n            if (mouseUpObject == mouseDownObject && mouseDownObject != undefined) {\n                mouseDownObject.onClick(mouseDownObject);\n            }\n        }\n        if (isOverview) {\n            if (autoRotateTimer != undefined) {\n                clearTimeout(autoRotateTimer);\n            }\n            autoRotateTimer = setTimeout(function () {\n                overviewCameraController.autoRotate = isOverviewAutoRotate;\n            }, 3000);\n        } else {\n            if (!isAutoRotate && isAutoButtonPressed) {\n                starAutoPlayDelay();\n            }\n        }\n    }\n}\nfunction registerClickEvent(object, onClick) {\n    clickableObjects.push(object);\n    object.onClick = onClick;\n}\nfunction register2DClickEvent(object, onClick) {\n    clickableObjects2D.push(object);\n    object.onClick = onClick;\n}\nfunction getIntersectObj(event) {\n    var inetsectObject;\n    event.preventDefault();\n    var x, y;\n    if (event.type == 'touchstart') {\n        x = event.touches[0].pageX;\n        y = event.touches[0].pageY;\n    } else if (event.type == 'touchend') {\n        x = event.changedTouches[0].pageX;\n        y = event.changedTouches[0].pageY;\n    } else {\n        x = event.clientX;\n        y = event.clientY;\n    }\n    mouse.x = x / renderer.domElement.clientWidth * 2 - 1;\n    mouse.y = -(y / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, cameraOrtho);\n    var intersects = raycaster.intersectObjects(clickableObjects2D);\n    if (intersects.length > 0 && sceneOrtho.visible && (houseShapeSprite.visible && intersects[0].object.tag != undefined || intersects[0].object.tag == undefined)) {\n        inetsectObject = intersects[0].object;\n    } else {\n        raycaster.setFromCamera(mouse, camera);\n        intersects = raycaster.intersectObjects(clickableObjects);\n        if (intersects.length > 0) {\n            inetsectObject = intersects[0].object;\n        }\n    }\n    return inetsectObject;\n}\nfunction getVRIntersectObj() {\n    var inetsectObject;\n    raycaster.setFromCamera({\n        x: 0,\n        y: 0\n    }, camera);\n    var intersects = raycaster.intersectObjects(clickableObjects);\n    if (intersects.length > 0) {\n        inetsectObject = intersects[0].object;\n    }\n    return inetsectObject;\n}\nfunction checkVRIntersect() {\n    var intesectObject = getVRIntersectObj();\n    if (previousVRIntersectObj != intesectObject) {\n        if (vrGazeTimer != undefined) {\n            clearTimeout(vrGazeTimer);\n        }\n        if (intesectObject != undefined) {\n            vrGazeTimer = setTimeout(function () {\n                intesectObject.onClick(intesectObject);\n            }, 1500);\n        }\n        previousVRIntersectObj = intesectObject;\n    }\n}\nfunction onSwitchToHotSpotViewClicked() {\n    onThumbnailClicked(lastClickedHotSpot.thumbnailElement, true);\n}\nfunction onSwitchToOverviewClicked() {\n    if (houseShapeSprite.visible) {\n        return;\n    }\n    if (isAutoButtonPressed) {\n        stopAutoPlay();\n    }\n    if (isShowThumbnail) {\n        document.getElementById('thumbnail-controller').style.visibility = 'visible';\n    } else {\n        document.getElementById('thumbnail-controller').style.visibility = 'hidden';\n        closeMap();\n    }\n    switchToHotSpotViewDiv.style.visibility = 'visible';\n    zoomInDiv.style.visibility = 'hidden';\n    zoomOutDiv.style.visibility = 'hidden';\n    enterHotSpotTip.style.visibility = 'visible';\n    switchVRButton.style.visibility = 'hidden';\n    clickedHotSpot = null;\n    camera.position.copy(previousCameraPosition);\n    camera.fov = isVREnabled ? vrModeFov : 75;\n    camera.updateProjectionMatrix();\n    disposeSkyBoxTexture();\n    showOverviewHotSpotNames(true);\n    showOverviewHotSpot();\n    for (var index in allHotSpots) {\n        var scale = 1;\n        allHotSpots[index].scale.set(scale, 1, scale);\n    }\n    overviewCameraController.enabled = true;\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n    overviewCameraController.update();\n    panoramaCameraController.enabled = false;\n    skyBox.visible = false;\n    background.visible = true;\n    houseObj.visible = true;\n    isHotSpotClickble = true;\n    for (var index in allHotSpots) {\n        allHotSpots[index].visible = true;\n    }\n    showAllRooms(true);\n    isOverview = true;\n}\nfunction switchToHotSpotView() {\n    document.getElementById('thumbnail-controller').style.visibility = 'visible';\n    switchToHotSpotViewDiv.style.visibility = 'hidden';\n    zoomInDiv.style.visibility = 'visible';\n    zoomOutDiv.style.visibility = 'visible';\n    enterHotSpotTip.style.visibility = 'hidden';\n    switchVRButton.style.visibility = 'visible';\n    showOverviewHotSpotNames(false);\n    for (var index in allHotSpots) {\n        allHotSpots[index].visible = false;\n    }\n    overviewCameraController.enabled = false;\n    overviewCameraController.autoRotate = false;\n    panoramaCameraController.enabled = true;\n    previousCameraPosition = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z);\n    camera.rotation.x = 0;\n    skyBox.visible = true;\n    background.visible = false;\n    if (!isSingleMode && houseShapeSprite) {\n        sceneOrtho.visible = true;\n        switchToMap(houseShapeSprite.visible);\n    }\n    if (isAutoButtonPressed) {\n        starAutoPlayDelay();\n    }\n    if (!isOnlyPanoramaView) {\n        houseObj.visible = false;\n    }\n    showAllRooms(false);\n    isOverview = false;\n}\nfunction showOverviewHotSpot() {\n    for (var index in allHotSpots) {\n        allHotSpots[index].lightObj.visible = true;\n        allHotSpots[index].circleSprite.visible = false;\n        allHotSpots[index].nameLine.visible = true;\n    }\n}\nfunction showOverviewHotSpotNames(show) {\n    for (var index in allHotSpots) {\n        var overviewHotSpotName = allHotSpots[index].overviewHotSpotNameSprite;\n        if (overviewHotSpotName != undefined) {\n            overviewHotSpotName.visible = show;\n            allHotSpots[index].nameLine = show;\n        }\n        if (show) {\n            var hotSpotName = allHotSpots[index].hotSpotNameSprite;\n            if (hotSpotName) {\n                hotSpotName.visible = false;\n            }\n        }\n    }\n}\nfunction onHotSpotNameClicked(hotSpotNameObj) {\n    onThumbnailClicked(hotSpotNameObj.parent.tag.thumbnailElement, true);\n}\nfunction onFirstHotSpotClicked(hotSpot, onLoad, onProgress, onError) {\n    console.log('fisrt:' + hotSpot.Name);\n    if (!isHotSpotClickble || clickedHotSpot == hotSpot) {\n        return;\n    }\n    lastClickedHotSpot = hotSpot;\n    clickedHotSpot = hotSpot;\n    isHotSpotClickble = false;\n    if (hotSpot.cached == undefined || hotSpot.cached == false) {\n        document.getElementById('loading').style.visibility = 'visible';\n    }\n    var imageName;\n    if (isSingleMode) {\n        imageName = hotSpot.ImagePath;\n    } else {\n        imageName = hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    }\n    imageName = imageName.substring(0, imageName.lastIndexOf('.'));\n    var urls = [\n        rootPathPanoBlur + imageName + '_l.jpg',\n        rootPathPanoBlur + imageName + '_r.jpg',\n        rootPathPanoBlur + imageName + '_u.jpg',\n        rootPathPanoBlur + imageName + '_d.jpg',\n        rootPathPanoBlur + imageName + '_f.jpg',\n        rootPathPanoBlur + imageName + '_b.jpg'\n    ];\n    loadCubePanoramaTexture(urls, function (cubeTexture) {\n        onPanoramaImageLoad(cubeTexture, hotSpot);\n        if (onLoad) {\n            onLoad();\n        }\n    }, function (index, xhr) {\n        if (onProgress) {\n            onProgress(index, xhr);\n        }\n    }, function (xhr) {\n        isHotSpotClickble = true;\n        document.getElementById('loading').style.visibility = 'hidden';\n        if (onError) {\n            onError();\n        }\n    });\n}\nfunction onHotSpotClicked(hotSpot, onLoad, onProgress, onError) {\n    console.log(hotSpot.Name);\n    var imageName;\n    if (isSingleMode) {\n        imageName = hotSpot.ImagePath;\n    } else {\n        imageName = hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    }\n    imageName = imageName.substring(0, imageName.lastIndexOf('.'));\n    var urls = [\n        rootPathPanoTile + imageName + '_l.jpg',\n        rootPathPanoTile + imageName + '_r.jpg',\n        rootPathPanoTile + imageName + '_u.jpg',\n        rootPathPanoTile + imageName + '_d.jpg',\n        rootPathPanoTile + imageName + '_f.jpg',\n        rootPathPanoTile + imageName + '_b.jpg'\n    ];\n    loadCubePanoramaTexture(urls, function (cubeTexture) {\n        disposeSkyBoxTexture();\n        for (var i = 0; i < skyBox.material.materials.length; i++) {\n            skyBox.material.materials[i].map = cubeTexture[i];\n        }\n        if (onLoad) {\n            onLoad();\n        }\n    }, function (index, xhr) {\n        if (onProgress) {\n            onProgress(index, xhr);\n        }\n    }, function (xhr) {\n        isHotSpotClickble = true;\n        document.getElementById('loading').style.visibility = 'hidden';\n        if (onError) {\n            onError();\n        }\n    });\n}\nfunction onPanoramaImageLoad(cubeTexture, hotSpot) {\n    document.getElementById('loading').style.visibility = 'hidden';\n    if (isOverview) {\n        switchToHotSpotView();\n    }\n    camera.fov = isVREnabled ? vrModeFov : defaultFov;\n    panoramaCameraController.updateRotation();\n    disposeSkyBoxTexture();\n    for (var i = 0; i < skyBox.material.materials.length; i++) {\n        skyBox.material.materials[i].map = cubeTexture[i];\n    }\n    if (!isSingleMode) {\n        if (hotSpotNameTag) {\n            hotSpotNameTag.position.set(clickedHotSpot.floorPlanPosition.x + hotSpotNameDistance, clickedHotSpot.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n            updateTextSprite(hotSpotNameTag, clickedHotSpot.Name.split('-')[0]);\n            for (var index in allHotSpots) {\n                if (allHotSpots[index].tag == clickedHotSpot) {\n                    sectorSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n                    break;\n                }\n            }\n        }\n        var cameraPosition = new THREE.Vector3(hotSpot.Position.x, hotSpot.Position.y, -hotSpot.Position.z);\n        camera.position.copy(cameraPosition);\n        camera.updateProjectionMatrix();\n        skyBox.position.copy(cameraPosition);\n        skyBox.rotation.y = THREE.Math.degToRad(180 - hotSpot.Rotation.y);\n        showVisibleHotSpots(hotSpot);\n    }\n    if (isFirstEnterHotSpotView) {\n        camera.rotation.x = 0;\n        camera.rotation.y = skyBox.rotation.y;\n        camera.rotation.z = 0;\n        panoramaCameraController.updateRotation();\n        isFirstEnterHotSpotView = false;\n    }\n    isHotSpotClickble = true;\n    hotSpot.cached = true;\n}\nfunction loadCubePanoramaTexture(urls, onLoad, onProgress, onError) {\n    var cubeTexture = [];\n    var loaded = 0;\n    function loadTexture(i) {\n        textureLoader.load(urls[i], function (texture) {\n            cubeTexture[i] = texture;\n            loaded++;\n            if (loaded === urls.length) {\n                if (onLoad)\n                    onLoad(cubeTexture);\n            }\n        }, function (xhr) {\n            if (onProgress) {\n                onProgress(i, xhr);\n            }\n        }, onError);\n    }\n    for (var i = 0; i < urls.length; i++) {\n        loadTexture(i);\n    }\n}\nfunction disposeSkyBoxTexture() {\n    for (var i = 0; i < skyBox.material.materials.length; i++) {\n        if (skyBox.material.materials[i].map != null) {\n            skyBox.material.materials[i].map.dispose();\n            skyBox.material.materials[i].map = null;\n        }\n    }\n}\nfunction showFirstHotSpot(hotSpotName, theta) {\n    var hotSpot;\n    if (hotSpotName) {\n        hotSpot = getHotSpotFromName(hotSpotName);\n    } else {\n        hotSpot = house.HotSpots[0];\n    }\n    if (!theta) {\n        theta = 0;\n    }\n    onHotSpotClicked(hotSpot, function () {\n        switchToOverviewDiv.style.visibility = 'hidden';\n        document.getElementById('welcome').style.visibility = 'hidden';\n        switchToHotSpotView();\n        camera.rotation.y = THREE.Math.degToRad(theta);\n        panoramaCameraController.updateRotation();\n        if (isShowThumbnail) {\n            createThumbnails(true);\n        }\n    }, function (index, xhr) {\n        firstCubProgress[index] = xhr.loaded / xhr.total;\n        var loadedProgress = 0;\n        for (var progressIndex in firstCubProgress) {\n            if (firstCubProgress[progressIndex] == undefined) {\n                firstCubProgress[progressIndex] = 0;\n            }\n            loadedProgress += firstCubProgress[progressIndex];\n        }\n        var value = parseInt(loadedProgress / 6 * 100);\n        var progressBar = document.getElementById('loading_progress_bar');\n        progressBar.style.width = value + '%';\n        progressBar.innerText = value + '%';\n    }, function () {\n        $('#loading_tip').text('加载失败');\n    });\n    document.getElementById('loading').style.visibility = 'hidden';\n}\nfunction showFirstHotSpotAfterLoading() {\n    var hotSpot = house.HotSpots[0];\n    onFirstHotSpotClicked(hotSpot, onResourcesPrepared, function (index, xhr) {\n        firstCubProgress[index] = xhr.loaded / xhr.total;\n        var loadedProgress = 0;\n        for (var progressIndex in firstCubProgress) {\n            if (firstCubProgress[progressIndex] == undefined) {\n                firstCubProgress[progressIndex] = 0;\n            }\n            loadedProgress += firstCubProgress[progressIndex];\n        }\n        var value = parseInt(loadedProgress / 6 * 100);\n        var progressBar = document.getElementById('loading_progress_bar');\n        progressBar.style.width = value + '%';\n        progressBar.innerText = value + '%';\n    }, function () {\n        $('#loading_tip').text('加载失败');\n    });\n    document.getElementById('loading').style.visibility = 'hidden';\n}\nfunction showVisibleHotSpots(hotSpot) {\n    var visibleHotSpots = [];\n    for (var index in hotSpot.VisibleHotSpots) {\n        visibleHotSpots.push(getHotSpotFromName(hotSpot.VisibleHotSpots[index]));\n    }\n    for (var index in allHotSpots) {\n        if (hotSpot == allHotSpots[index].tag) {\n            allHotSpots[index].visible = false;\n        } else {\n            var visible = contains(visibleHotSpots, allHotSpots[index].tag);\n            allHotSpots[index].visible = visible;\n            allHotSpots[index].lightObj.visible = false;\n            allHotSpots[index].circleSprite.visible = visible;\n            var textSprite = allHotSpots[index].hotSpotNameSprite;\n            if (!textSprite) {\n                continue;\n            }\n            textSprite.visible = visible;\n            if (visible) {\n                var distance = camera.position.distanceTo(allHotSpots[index].position.clone().add(textSprite.position));\n                var scale = distance * 0.08;\n                allHotSpots[index].circleSprite.scale.set(scale, scale, scale);\n                scale = 0.015 * distance;\n                var textSprite = allHotSpots[index].hotSpotNameSprite;\n                textSprite.scale.set(textSprite.material.map.scaleX * scale, textSprite.material.map.scaleY * scale, 1);\n                textSprite.position.y = textSprite.y * scale;\n            }\n        }\n    }\n}\nfunction contains(a, obj) {\n    var i = a.length;\n    while (i--) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction onSwitch2DButtonClicked() {\n    setAutoMode(false);\n    switchToMap(true);\n    switch2DButton.material.map = textureLoader.load('src/textures/button_2D_pressed.png');\n    switch3DButton.material.map = textureLoader.load('src/textures/button_3D.png');\n}\nfunction onSwitch3DButtonClicked() {\n    setAutoMode(false);\n    switchToMap(false);\n    switch2DButton.material.map = textureLoader.load('src/textures/button_2D.png');\n    switch3DButton.material.map = textureLoader.load('src/textures/button_3D_pressed.png');\n}\nfunction setAutoMode(needAutoMode) {\n    if (needAutoMode) {\n        switchAutoButton.material.map = textureLoader.load('src/textures/button_Auto_pressed.png');\n        starAutoPlayDelay();\n        isAutoButtonPressed = true;\n    } else {\n        stopAutoPlay();\n        isAutoButtonPressed = false;\n        switchAutoButton.material.map = textureLoader.load('src/textures/button_Auto.png');\n    }\n}\nfunction onSwitchAutoButtonClicked() {\n    if (isAutoButtonPressed) {\n        setAutoMode(false);\n        if (houseShapeSprite.visible) {\n            switch2DButton.material.map = textureLoader.load('src/textures/button_2D_pressed.png');\n        } else {\n            switch3DButton.material.map = textureLoader.load('src/textures/button_3D_pressed.png');\n        }\n    } else {\n        if (houseShapeSprite.visible) {\n            switch2DButton.material.map = textureLoader.load('src/textures/button_2D.png');\n        } else {\n            switch3DButton.material.map = textureLoader.load('src/textures/button_3D.png');\n        }\n        setAutoMode(true);\n    }\n}\nfunction onVRButtonClicked() {\n    onSwitchVRMode();\n}\nfunction cameraSwitchAnimation() {\n    if (isSwitching) {\n        console.log('camera: ' + camera.position.x + ',' + camera.position.y + ',' + camera.position.z);\n        console.log('previousCameraPosition: ' + previousCameraPosition.x + ',' + previousCameraPosition.y + ',' + previousCameraPosition.z);\n        if (camera.position.y > previousCameraPosition.y && camera.position.y - previousCameraPosition.y < 0.01 || camera.position.y < previousCameraPosition.y && camera.position.y - previousCameraPosition.y > -0.01) {\n            clickedHotSpot = null;\n            isSwitching = false;\n        } else {\n            camera.position.x += switchSpeed.x;\n            camera.position.y += switchSpeed.y;\n            camera.position.z += switchSpeed.z;\n            camera.rotation.x += rotationSpeed.x;\n            camera.rotation.z += rotationSpeed.z;\n        }\n    }\n}\nfunction cameraZoomAnimation() {\n    if (isZooming) {\n        if (zoomSpeed > 0 && camera.fov >= targetZoomFov || zoomSpeed < 0 && camera.fov <= targetZoomFov) {\n            isZooming = false;\n        } else {\n            camera.fov += zoomSpeed;\n        }\n    }\n}\nfunction onZoomInClicked() {\n    if (!isZooming) {\n        isZooming = true;\n        targetZoomFov = Math.max(50, Math.min(100, camera.fov - 25));\n        if (zoomSpeed > 0) {\n            zoomSpeed = -zoomSpeed;\n        }\n    }\n}\nfunction onZoomOutClicked() {\n    if (!isZooming) {\n        isZooming = true;\n        targetZoomFov = Math.max(50, Math.min(100, camera.fov + 25));\n        if (zoomSpeed < 0) {\n            zoomSpeed = -zoomSpeed;\n        }\n    }\n}\nfunction starAutoPlayDelay() {\n    if (autoPlayTimer != undefined) {\n        clearTimeout(autoPlayTimer);\n    }\n    autoPlayTimer = setTimeout(function () {\n        if (!isMouseDown) {\n            isAutoRotate = true;\n            switchToMap(!is3DPrepared);\n        }\n    }, 6000);\n}\nfunction stopAutoPlay() {\n    console.log('stopAutoPlay');\n    if (autoPlayTimer != undefined) {\n        clearTimeout(autoPlayTimer);\n    }\n    isAutoRotate = false;\n}\nfunction switchToMap(showMap) {\n    if (!isSingleMode) {\n        houseShapeSprite.visible = showMap;\n        hotSpotGroup.visible = showMap;\n        sceneSmallHouse.visible = !showMap;\n        is3DMode = !showMap;\n    }\n}\nfunction starAutoPlay() {\n}\nfunction closeMap() {\n    sceneSmallHouse.visible = false;\n    sceneOrtho.visible = false;\n    stopAutoPlay();\n}\nfunction onSwitchFullscreenButtonClicked() {\n    isFullscreen = !isFullscreen;\n    if (!isFullscreen) {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n        }\n    } else {\n        if (document.documentElement.requestFullscreen) {\n            document.documentElement.requestFullscreen();\n        } else if (document.documentElement.mozRequestFullScreen) {\n            document.documentElement.mozRequestFullScreen();\n        } else if (document.documentElement.webkitRequestFullscreen) {\n            document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n        } else if (document.body.msRequestFullscreen) {\n            document.body.msRequestFullscreen();\n        }\n    }\n    switchFullscreenButton.innerText = isFullscreen ? '退出全屏' : '全屏';\n    isOverviewAutoRotate = !isFullscreen;\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n}\nfunction createHouse() {\n    totalPanoramaImageCount = house.HotSpots.length;\n    houseObj = new THREE.Object3D();\n    houseObj.name = house.Name;\n    scene.add(houseObj);\n    smallHouseObj = houseObj.clone();\n    sceneSmallHouse.add(smallHouseObj);\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        var roomObj = new THREE.Object3D();\n        roomObj.name = room.Name;\n        roomObj.position.set(room.Position.x, room.Position.y, -room.Position.z);\n        roomObj.rotation.set(0, THREE.Math.degToRad(-room.Rotation), 0);\n        houseObj.add(roomObj);\n        allRooms.push(roomObj);\n        room.gameObject = roomObj;\n        if (!room.IsSecondFloor) {\n            room.IsSecondFloor = room.Position.y > 100;\n        }\n        var smallRoomObj = roomObj.clone();\n        smallHouseObj.add(smallRoomObj);\n        for (var faceIndex in room.RoomFaces) {\n            totalRoomFaceCount++;\n        }\n    }\n    houseObj.scale.set(houseScale, houseScale, houseScale);\n    houseSize = getHouseSize(house);\n    return house;\n}\nfunction getHotSpotFromName(hotSpotName) {\n    var hotSpot;\n    for (var hotSpotIndex in house.HotSpots) {\n        if (house.HotSpots[hotSpotIndex].Name == hotSpotName) {\n            hotSpot = house.HotSpots[hotSpotIndex];\n            break;\n        }\n    }\n    return hotSpot;\n}\nfunction loadFaceTexture(roomFace, roomObj, smallRoomObj) {\n    var faceTexturePath = roomFace.ImagePath.replace(ossHost, domain);\n    var texture = textureLoader.load(faceTexturePath, function (loadedTexture) {\n        loadedTexture.minFilter = THREE.LinearFilter;\n        var planeGeometry = new THREE.PlaneBufferGeometry(roomFace.Width, roomFace.Height, 1, 1);\n        var planeMaterial = new THREE.MeshBasicMaterial({\n            map: loadedTexture,\n            side: THREE.BackSide,\n            alphaTest: 0.1\n        });\n        planeMaterial.transparent = true;\n        planeMaterial.depthWrite = true;\n        var facePlane = new THREE.Mesh(planeGeometry, planeMaterial);\n        facePlane.rotation.reorder('YXZ');\n        facePlane.rotation.set(THREE.Math.degToRad(roomFace.Rotation.x), THREE.Math.degToRad(roomFace.Rotation.y), THREE.Math.degToRad(roomFace.Rotation.z));\n        facePlane.position.set(roomFace.Position.x, roomFace.Position.y, -roomFace.Position.z);\n        roomFace.facePlane = facePlane;\n        roomObj.add(facePlane);\n        var smallFacePlane = facePlane.clone();\n        smallRoomObj.add(smallFacePlane);\n    }, function (xhr) {\n        onRoomFaceTextureLoading(roomFace, xhr);\n    });\n    return texture;\n}\nfunction setOverviewCameraControllerDistance(isLandscape) {\n    debugLog('setOverviewCameraControllerDistance');\n    if (houseSize == undefined || overviewCameraController == undefined) {\n        return;\n    }\n    var factor = Math.min(houseSize.x, houseSize.z) * houseScale * 0.0025;\n    overviewCameraController.minDistance = 370 * factor;\n    overviewCameraController.maxDistance = 900 * factor;\n    if (isLandscape) {\n        overviewCameraController.minDistance -= 80 * factor;\n        overviewCameraController.maxDistance -= 200 * factor;\n    }\n}\nfunction setDefaultCameraPosition(isLandscape) {\n    var theta = 60;\n    var phi = 60;\n    var radius = 650;\n    var d = Math.cos(THREE.Math.degToRad(phi)) * radius;\n    var x = Math.sin(THREE.Math.degToRad(theta)) * d;\n    var y = Math.sin(THREE.Math.degToRad(phi)) * radius;\n    var z = -Math.cos(THREE.Math.degToRad(theta)) * d;\n    var factor = Math.max(houseSize.x, houseSize.z) * houseScale * 0.002;\n    var defaultCameraPosition = new THREE.Vector3(x * factor, y * factor, z * factor);\n    if (isLandscape) {\n        defaultCameraPosition.x += 100 * factor;\n        defaultCameraPosition.y -= 50 * factor;\n        defaultCameraPosition.z += 100 * factor;\n    }\n    camera.position.copy(defaultCameraPosition);\n}\nfunction getHouseSize(house) {\n    var minX, maxX;\n    var minY, maxY;\n    var minZ, maxZ;\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        for (var faceIndex in room.RoomFaces) {\n            var roomFace = room.RoomFaces[faceIndex];\n            if (roomIndex == 0 && faceIndex == 0) {\n                minX = maxX = room.Position.x + roomFace.Position.x;\n                minY = maxY = room.Position.y + roomFace.Position.y;\n                minZ = maxZ = room.Position.z + roomFace.Position.z;\n            } else {\n                minX = Math.min(minX, room.Position.x + roomFace.Position.x);\n                maxX = Math.max(maxX, room.Position.x + roomFace.Position.x);\n                minY = Math.min(minY, room.Position.y + roomFace.Position.y);\n                maxY = Math.max(maxY, room.Position.y + roomFace.Position.y);\n                minZ = Math.min(minZ, -room.Position.z - roomFace.Position.z);\n                maxZ = Math.max(maxZ, -room.Position.z - roomFace.Position.z);\n            }\n        }\n    }\n    return new THREE.Vector3(maxX - minX, maxY - minY, maxZ - minZ);\n}\nfunction onRoomFaceTextureLoading(roomFace, xhr) {\n    roomFace.loadedProgress = xhr.loaded / xhr.total;\n    var loadedProgress = 0;\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        for (var faceIndex in room.RoomFaces) {\n            var face = room.RoomFaces[faceIndex];\n            if (face.loadedProgress == undefined) {\n                face.loadedProgress = 0;\n            }\n            loadedProgress += face.loadedProgress;\n        }\n    }\n    var value = parseInt(loadedProgress / totalRoomFaceCount * 100);\n    if (value == 100) {\n        setTimeout(on3DHousePrepared, 500);\n    }\n}\nfunction on3DHousePrepared() {\n    console.log('on3DHousePrepared');\n    is3DPrepared = true;\n    is3DMode = true;\n    switchToMap(false);\n    starAutoPlayDelay();\n}\nfunction onResourcesPrepared() {\n    console.log('ResoucePrepared');\n    createThumbnails(true);\n    var hotSpot = house.HotSpots[0];\n    onHotSpotClicked(hotSpot);\n    onThumbnailClicked(hotSpot.thumbnailElement, false);\n    initMap();\n    document.getElementById('welcome').style.visibility = 'hidden';\n    $('#controlTip')[0].style.visibility = 'visible';\n    setTimeout(function () {\n        $('#controlTip').fadeOut(3000);\n    }, 2000);\n    document.getElementById('controlDiv').style.visibility = 'visible';\n    starAutoPlay();\n}\nfunction onSwitchVRMode() {\n    isEnableVRMode = !isEnableVRMode;\n    if (!isOnlyPanoramaView) {\n    }\n    if (isEnableVRMode) {\n        if (isLandscapeOrNot()) {\n            switchVRMode(true);\n        } else {\n            vrStartTip.style.visibility = 'visible';\n            vrStartTip.style.opacity = 1;\n            $('#vrStartTip').stop();\n            $('#vrStartTip').show();\n            panoramaCameraController.enabled = false;\n            $('#vrStartTip').fadeOut(5000);\n        }\n    } else {\n        switchVRMode(false);\n    }\n}\nfunction getParameterByName(name) {\n    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\nfunction switchVRMode(enable) {\n    camera.fov = enable ? vrModeFov : defaultFov;\n    isVREnabled = enable;\n    crosshair.visible = enable;\n    if (!enable) {\n        disableVRMode();\n    } else {\n        enableVRMode();\n    }\n    if (emulateVRControl) {\n        if (enable) {\n            panoramaCameraController.enabled = true;\n        } else if (isOverview) {\n            panoramaCameraController.enabled = false;\n        }\n    }\n}\nfunction enableVRMode() {\n    if (isOverview) {\n        overviewCameraController.enabled = false;\n        camera.position.x = 100;\n        camera.position.y = 250;\n        camera.position.z = 300;\n    } else {\n        panoramaCameraController.enabled = false;\n        $('#vrStartTip').stop();\n    }\n    vrStartTip.style.visibility = 'hidden';\n}\nfunction disableVRMode() {\n    if (isOverview) {\n        overviewCameraController.enabled = true;\n        overviewCameraController.update();\n    } else {\n        camera.rotation.z = 0;\n        panoramaCameraController.enabled = true;\n        stopAutoPlay();\n        starAutoPlayDelay();\n        panoramaCameraController.updateRotation();\n    }\n    if (vrGazeTimer != undefined) {\n        clearTimeout(vrGazeTimer);\n    }\n    vrStartTip.style.visibility = 'hidden';\n}\nfunction debugLog(message) {\n    if (isDebugMode) {\n        debugTextValue += message;\n        debugTextValue += '\\n';\n        debugText.value = debugTextValue;\n    }\n}\nfunction createTextSprite(message, parameters) {\n    var texture = createTextTexture(message, parameters);\n    var spriteMaterial = new THREE.SpriteMaterial({ map: texture });\n    var sprite = new THREE.Sprite(spriteMaterial);\n    sprite.scale.set(texture.scaleX, texture.scaleY, 1);\n    return sprite;\n}\nfunction createTextTexture(message, parameters) {\n    if (parameters === undefined)\n        parameters = {};\n    var fontface = parameters.hasOwnProperty('fontface') ? parameters['fontface'] : 'Arial';\n    var fontsize = parameters.hasOwnProperty('fontsize') ? parameters['fontsize'] : 18;\n    var borderThickness = parameters.hasOwnProperty('borderThickness') ? parameters['borderThickness'] : 0;\n    var borderColor = parameters.hasOwnProperty('borderColor') ? parameters['borderColor'] : {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 1\n    };\n    var backgroundColor = parameters.hasOwnProperty('backgroundColor') ? parameters['backgroundColor'] : {\n        r: 255,\n        g: 255,\n        b: 255,\n        a: 1\n    };\n    var cornerAngle = parameters.hasOwnProperty('cornerAngle') ? parameters['cornerAngle'] : 10;\n    var canvas = document.createElement('canvas');\n    canvas.width = fontsize * 12;\n    canvas.height = fontsize * 1.4;\n    var context = canvas.getContext('2d');\n    context.font = 'normal ' + fontsize + 'px ' + fontface;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    var metrics = context.measureText(message);\n    var textWidth = metrics.width;\n    var x = (canvas.width + borderThickness) / 2;\n    var y = (canvas.height + borderThickness) / 2;\n    context.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + backgroundColor.a + ')';\n    context.strokeStyle = 'rgba(' + borderColor.r + ',' + borderColor.g + ',' + borderColor.b + ',' + borderColor.a + ')';\n    context.lineWidth = borderThickness;\n    var border = 100;\n    roundRect(context, (canvas.width - textWidth - border) / 2, 0, textWidth + border, canvas.height, cornerAngle);\n    context.fillStyle = 'rgba(255, 255, 255, 1.0)';\n    context.fillText(message, x, y);\n    var texture = new THREE.Texture(canvas);\n    texture.minFilter = THREE.LinearFilter;\n    texture.needsUpdate = true;\n    texture.parameters = parameters;\n    texture.scaleX = canvas.width * 0.05;\n    texture.scaleY = canvas.height * 0.05;\n    return texture;\n}\nfunction updateTextSprite(textSprite, message) {\n    var texture = createTextTexture(message, textSprite.material.map.parameters);\n    textSprite.material.map.dispose();\n    textSprite.material.map = texture;\n}\nfunction roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.lineTo(x + w - r, y);\n    ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n    ctx.lineTo(x + w, y + h - r);\n    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    ctx.lineTo(x + r, y + h);\n    ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n    ctx.lineTo(x, y + r);\n    ctx.quadraticCurveTo(x, y, x + r, y);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n}\nfunction createHotSpotSprite(texture) {\n    var clickEvent = function clickEvent(circleSprite) {\n        onThumbnailClicked(circleSprite.parent.parent.tag.thumbnailElement, true);\n    };\n    var spriteGroupMaterial = new THREE.SpriteMaterial({ opacity: 0 });\n    var spriteGroup = new THREE.Sprite(spriteGroupMaterial);\n    spriteGroup.scale.set(10, 10, 1);\n    registerClickEvent(spriteGroup, clickEvent);\n    var material1 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 1\n    });\n    var sprite1 = new THREE.Sprite(material1);\n    spriteGroup.add(sprite1);\n    var size = 0.25;\n    sprite1.scale.set(size, size, 1);\n    var material2 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 0.6\n    });\n    var sprite2 = new THREE.Sprite(material2);\n    spriteGroup.add(sprite2);\n    size = 0.75;\n    sprite2.scale.set(size, size, 1);\n    var material3 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 0.2\n    });\n    var sprite3 = new THREE.Sprite(material3);\n    spriteGroup.add(sprite3);\n    size = 1;\n    sprite3.scale.set(size, size, 1);\n    animate();\n    function animate() {\n        var time = Date.now() / 1000;\n        var speed = 5;\n        var scale = 0.8 + Math.sin(time * speed) * 0.2;\n        var scale1 = scale * 0.25;\n        sprite1.scale.set(scale1, scale1, scale1);\n        var scale2 = scale * 0.6;\n        sprite2.scale.set(scale2, scale2, scale2);\n        var scale3 = scale;\n        sprite3.scale.set(scale3, scale3, scale3);\n        requestAnimationFrame(animate);\n    }\n    return spriteGroup;\n}\nfunction onThumbnailControllerClicked() {\n    if ($('#thumbnail-list')[0].style.display == 'none') {\n        $('#thumbnail-list').slideDown('slow');\n    } else {\n        $('#thumbnail-list').slideUp('slow');\n    }\n}\nfunction Thumbnail() {\n    this.imagePath;\n    this.name;\n    this.onclick;\n    this.isSelected = false;\n    this.click = function () {\n        if (this.onclick) {\n            this.onclick(this);\n        }\n    };\n}\nfunction createThumbnails(isVisible) {\n    if (isVisible) {\n        $('#thumbnail-controller')[0].style.visibility = 'visible';\n    } else {\n        $('#thumbnail-controller')[0].style.visibility = 'hidden';\n    }\n    var thumbnailList = getThumbnailList();\n    var template = $('#thumbnail');\n    for (var index in thumbnailList) {\n        var clonedThumbnail = template.clone().appendTo('#thumbnail-list');\n        clonedThumbnail.find('#thumbnail-name')[0].innerText = thumbnailList[index].name;\n        clonedThumbnail.find('#thumbnail-image')[0].src = thumbnailList[index].imagePath;\n        clonedThumbnail[0].onclick = function () {\n            onThumbnailClicked($(this), true);\n        };\n        clonedThumbnail[0].thumbnailData = thumbnailList[index];\n        if (!isSingleMode) {\n            var hotSpot = allHotSpots[index].tag;\n            hotSpot.thumbnailElement = clonedThumbnail;\n        }\n    }\n    template.remove();\n}\nfunction getThumbnailList() {\n    var thumbnailList = [];\n    for (var hotSpotIndex in house.HotSpots) {\n        var hotSpot = house.HotSpots[hotSpotIndex];\n        var thumbnail = instantiateThumbnail(hotSpot);\n        if (hotSpotIndex == 0) {\n            thumbnail.isSelected = true;\n        }\n        thumbnailList.push(thumbnail);\n    }\n    return thumbnailList;\n}\nfunction instantiateThumbnail(hotSpot) {\n    var thumbnailPath = domain + houseId + '/ThumbnailImages/' + hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    var thumbnail = new Thumbnail();\n    thumbnail.name = hotSpot.Name.split('-')[0];\n    thumbnail.imagePath = thumbnailPath;\n    thumbnail.onclick = function () {\n        onHotSpotClicked(hotSpot, onFirstHotSpotClicked(hotSpot));\n    };\n    return thumbnail;\n}\nfunction onThumbnailClicked(thumbnailElement, needClick) {\n    thumbnailElement[0].children[0].classList.remove('thumbnail-unselected');\n    thumbnailElement[0].children[0].classList.add('thumbnail-selected');\n    thumbnailElement.siblings().each(function (index, domElement) {\n        domElement.children[0].classList.remove('thumbnail-selected');\n        domElement.children[0].classList.add('thumbnail-unselected');\n        if (domElement.thumbnailData) {\n            domElement.thumbnailData.isSelected = false;\n        }\n    });\n    var thumbnail = thumbnailElement[0].thumbnailData;\n    thumbnail.isSelected = true;\n    if (needClick) {\n        thumbnail.click();\n    }\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar PanoramaControls = function PanoramaControls(camera, domElement) {\n    this.enabled = false;\n    this.isAutoPlay = false;\n    var isPointDown = false;\n    var onPointerDownPointerX = 0, onPointerDownPointerY = 0, theta = 0, onPointerDownTheta = 0, phi = 0, onPointerDownPhi = 0;\n    var scope = this;\n    var touchSensitive = 3;\n    camera.target = new THREE.Vector3(0, 0, 0);\n    if (domElement == null || domElement == undefined) {\n        domElement = document;\n    }\n    domElement.addEventListener('mousedown', onMouseDown, false);\n    domElement.addEventListener('mousemove', onMouseMove, false);\n    domElement.addEventListener('mouseup', onMouseUp, false);\n    domElement.addEventListener('touchstart', onTouchDown, false);\n    domElement.addEventListener('touchend', onTouchUp, false);\n    domElement.addEventListener('touchmove', onTouchMove, false);\n    animate();\n    function onPointDown(x, y) {\n        isPointDown = true;\n        onPointerDownPointerX = x;\n        onPointerDownPointerY = y;\n        onPointerDownTheta = theta;\n        onPointerDownPhi = phi;\n    }\n    function onPointMove(x, y) {\n        if (isPointDown && scope.enabled) {\n            theta = (onPointerDownPointerX - x) * 0.1 + onPointerDownTheta;\n            phi = (y - onPointerDownPointerY) * 0.1 + onPointerDownPhi;\n        }\n    }\n    function onPointUp() {\n        isPointDown = false;\n    }\n    function onTouchDown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointDown(event.touches[0].pageX * touchSensitive, event.touches[0].pageY * touchSensitive);\n    }\n    function onTouchMove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointMove(event.touches[0].pageX * touchSensitive, event.touches[0].pageY * touchSensitive);\n    }\n    function onTouchUp(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointUp();\n    }\n    function onMouseDown(event) {\n        event.preventDefault();\n        onPointDown(event.clientX, event.clientY);\n        document.addEventListener('mousemove', onMouseMove, false);\n        document.addEventListener('mouseup', onMouseUp, false);\n    }\n    function onMouseMove(event) {\n        event.preventDefault();\n        onPointMove(event.clientX, event.clientY);\n    }\n    function onMouseUp(event) {\n        event.preventDefault();\n        onPointUp();\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n    }\n    function onMouseWheel(event) {\n        var fov = camera.fov + event.deltaY * 0.05;\n        fov = Math.max(30, Math.min(100, fov));\n        camera.fov = fov;\n        camera.updateProjectionMatrix();\n    }\n    this.updateRotation = function () {\n        theta = THREE.Math.radToDeg(-camera.rotation.y);\n        phi = THREE.Math.radToDeg(camera.rotation.x);\n        update();\n    };\n    function update() {\n        if (!scope.enabled) {\n            return;\n        }\n        if (scope.isAutoPlay && !isPointDown) {\n            theta += 0.05;\n        }\n        phi = Math.max(-18, Math.min(85, phi));\n        camera.rotation.x = THREE.Math.degToRad(phi);\n        camera.rotation.y = -THREE.Math.degToRad(theta);\n    }\n    function animate() {\n        requestAnimationFrame(animate);\n        update();\n    }\n};\nmodule.exports = PanoramaControls;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// pano.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5fdb1a2b5f8225b5530b","var PanoramaControls = require('./panoCtrl.js');\nvar ossHost = 'http://vrhouse.oss-cn-shanghai.aliyuncs.com/';\nvar domain = 'http://vrhouse.oss-cn-shanghai.aliyuncs.com/';\ndomain = './house/';\nvar stats, openStats = false;\nvar raycaster, mouse;\nvar scene, camera, renderer, textureLoader, background;\nvar sceneOrtho, cameraOrtho;\nvar mapGroup, buttonGroup, sectorSprite, hotSpotNameTag, mouseHoverObj;\nvar hotSpotGroup, houseShapeSprite, mapBgSprite, buttonGroupBgSprite;\nvar mapWidth, mapHeight, mapScale, buttongGroupBgHeight;\nvar zoomSpeed, isZooming, targetZoomFov;\nvar switchTime, switchSpeed = new THREE.Vector3(), rotationSpeed = new THREE.Vector3(), isSwitching, previousCameraRotation;\nvar is3DPrepared = false;\nvar isDebugMode = false;\nvar isMouseDown = false;\nvar lastSectorSpriteRotation;\nvar debugTextValue = '';\nvar switch2D3DButton, switch2DButton, switch3DButton, switchAutoButton, fullScreen3DHouseButton, is3DMode, isAutoButtonPressed = true, isAutoRotate = false;\nvar firstCubProgress = [];\nvar SCREEN_WIDTH, SCREEN_HEIGHT;\nvar sceneSmallHouse, cameraSmallHouse, smallHouseObj, smallBackground;\nvar hotSpotScale, hotSpotDistance, hotSpotDirection, hotSpotNameDirection, hotSpotNameDistance;\nvar container = document.getElementById('vr_house_container');\nvar overViewHotSpotNameSuffix = '_overViewHotSpotName';\nvar hotSpotNameSuffix = '_hotSpotName';\nvar hotSpotLineName = '_hotSpotLine';\nvar house, houseObj;\nvar houseSize;\nvar logoPlane;\nvar clickableObjects = [];\nvar clickableObjects2D = [];\nvar allRooms = [];\nvar allHotSpots = [];\nvar overviewCameraController, panoramaCameraController;\nvar isOverview = true;\nvar skyBox;\nvar isOnlyPanoramaView = false;\nvar previousCameraPosition;\nvar isPhone;\nvar defaultFov = 100;\nvar vrModeFov = 93;\nvar zoomInDiv = document.getElementById('zoomInDiv');\nvar zoomOutDiv = document.getElementById('zoomOutDiv');\nvar switchToOverviewDiv = document.getElementById('switchToOverviewDiv');\nvar switchToHotSpotViewDiv = document.getElementById('switchToHotSpotViewDiv');\nvar switchVRButton = document.getElementById('switchVRButton');\nvar switchFullscreenButton = document.getElementById('switchFullscreenButton');\nvar enterHotSpotTip = document.getElementById('enterHotSpotTip');\nvar vrStartTip = document.getElementById('vrStartTip');\nvar debugText = document.getElementById('debugText');\nvar houseScale = 1;\nvar isFirstEnterHotSpotView = true;\nvar isHotSpotClickble = true;\nvar clickedHotSpot, lastClickedHotSpot;\nvar mouseDownTime;\nvar mouseDownObject;\nvar totalRoomFaceCount = 0;\nvar totalPanoramaImageCount;\nvar isOverviewAutoRotate = true;\nvar isFullscreen = false;\nvar autoRotateTimer;\nvar autoPlayTimer;\nvar vrControls, vrEffect;\nvar crosshair;\nvar isVREnabled = false;\nvar isEnableVRMode = false;\nvar vrGazeTimer;\nvar previousVRIntersectObj;\nvar emulateVRControl = false;\nvar isShowThumbnail = false;\nvar isSingleMode = false;\nvar houseId, rootPathPanoTile, rootPathPanoBlur;\nif (isWebglSupport()) {\n    getHouseViewData();\n} else {\n    var browser = getBrowser();\n    var tip = '您的浏览器不支持VR看房\\uFF0C当前浏览器版本是\\uFF1A' + browser.name + ' ' + browser.version + '<br/>' + '请使用以下浏览器\\uFF1A<br/>IE11\\u3001IE Edge\\u3001Firefox48+\\u3001Chrome50+\\u3001Safari9+\\u3001猎豹浏览器\\u3001360浏览器\\u3001UC浏览器<br/>' + checkIsPhone() ? '请升级您的浏览器版本' : '请使用win7以上的系统';\n    document.getElementById('loading_tip').innerHTML = tip;\n}\nfunction isWebglSupport() {\n    try {\n        var canvas = document.createElement('canvas');\n        return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\n    } catch (e) {\n        return false;\n    }\n}\nfunction getBrowser() {\n    var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if (/trident/i.test(M[1])) {\n        tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return {\n            name: 'IE',\n            version: tem[1] || ''\n        };\n    }\n    if (M[1] === 'Chrome') {\n        tem = ua.match(/\\bOPR|Edge\\/(\\d+)/);\n        if (tem != null) {\n            return {\n                name: 'Opera',\n                version: tem[1]\n            };\n        }\n    }\n    M = M[2] ? [\n        M[1],\n        M[2]\n    ] : [\n        navigator.appName,\n        navigator.appVersion,\n        '-?'\n    ];\n    if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {\n        M.splice(1, 1, tem[1]);\n    }\n    return {\n        name: M[0],\n        version: M[1]\n    };\n}\nfunction getHouseViewData() {\n    houseId = getParameterByName('hid');\n    houseId = '22544f76-25cf-42db-aa44-53f309567dcf';\n    rootPathPanoTile = domain + houseId + '/PanoramaTileImages/';\n    rootPathPanoBlur = domain + houseId + '/PanoramaBlurTileImages/';\n    var viewMode = getParameterByName('mode');\n    if (isDebugMode) {\n        debugText.style.visibility = 'visible';\n        debugLog(debugText.style.visibility);\n    }\n    if (viewMode == 'single') {\n        isShowThumbnail = true;\n        isSingleMode = true;\n    }\n    var url = './house/ViewData.txt';\n    $.ajax({\n        url: url,\n        type: 'GET',\n        success: function success(data) {\n            house = JSON.parse(data);\n            document.title = house.Name + '(极速版)';\n            if (isSingleMode) {\n                if (house.HotSpots.length == 0) {\n                    $('#loading_tip').text('没有全景图片');\n                } else {\n                    initPanoramaHouse();\n                }\n            } else {\n                init3DHouse();\n            }\n        },\n        error: function error(e) {\n            if (e.status == '404') {\n                $('#loading_tip').text('您要浏览的房子不存在');\n            }\n        }\n    });\n}\nfunction initPanoramaHouse() {\n    isOverview = false;\n    isOnlyPanoramaView = true;\n    initThreejs();\n    initPanoramaView();\n    initVRCrosshair();\n    if (!isSingleMode) {\n        createHotSpots();\n    }\n    registerEventListener();\n    showFirstHotSpot();\n}\nfunction init3DHouse() {\n    initThreejs();\n    initLight();\n    initPanoramaView();\n    initVRCrosshair();\n    createHouse();\n    createHotSpots();\n    registerEventListener();\n    var isLandscape = isLandscapeOrNot();\n    debugLog('init3DHouse,isLandscape: ' + isLandscape);\n    setOverviewCameraControllerDistance(isLandscape);\n    setDefaultCameraPosition(isLandscape);\n    showFirstHotSpotAfterLoading();\n}\nfunction initThreejs() {\n    mapWidth = mapHeight = 425;\n    buttongGroupBgHeight = 30;\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    isPhone = checkIsPhone();\n    textureLoader = new THREE.TextureLoader();\n    raycaster = new THREE.Raycaster();\n    mouse = new THREE.Vector2();\n    scene = new THREE.Scene();\n    var bgGeometry = new THREE.SphereBufferGeometry(3000, 1, 1);\n    var bgMaterial = new THREE.MeshPhongMaterial({\n        color: 3948353,\n        specular: 1118481,\n        side: THREE.BackSide\n    });\n    background = new THREE.Mesh(bgGeometry, bgMaterial);\n    scene.add(background);\n    camera = new THREE.PerspectiveCamera(defaultFov, SCREEN_WIDTH / SCREEN_HEIGHT, 0.5, 100000);\n    camera.rotation.reorder('YXZ');\n    scene.add(camera);\n    isSwitching = false;\n    switchTime = 2;\n    if (!isSingleMode) {\n        sceneSmallHouse = new THREE.Scene();\n        sceneSmallHouse.visible = false;\n        cameraSmallHouse = new THREE.PerspectiveCamera(35, mapWidth / mapHeight, 0.5, 100000);\n        cameraSmallHouse.rotation.reorder('YXZ');\n        cameraSmallHouse.position.z = 1;\n        sceneOrtho = new THREE.Scene();\n        sceneOrtho.visible = false;\n        cameraOrtho = new THREE.OrthographicCamera(-SCREEN_WIDTH / 2, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, -SCREEN_HEIGHT / 2, 1, 10);\n        cameraOrtho.position.z = 10;\n        mapGroup = new THREE.Group();\n        sceneOrtho.add(mapGroup);\n        buttonGroup = new THREE.Group();\n        sceneOrtho.add(buttonGroup);\n    }\n    renderer = new THREE.WebGLRenderer();\n    renderer.antialias = true;\n    renderer.sortObjects = false;\n    renderer.setPixelRatio(isPhone ? 4 : 2);\n    renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    renderer.autoClear = false;\n    container.appendChild(renderer.domElement);\n    if (openStats) {\n        stats = new Stats();\n        container.appendChild(stats.dom);\n    }\n    vrControls = new THREE.VRControls(camera);\n    vrEffect = new THREE.StereoEffect(renderer);\n    vrEffect.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    initCameraControl();\n    render();\n}\nfunction initMap() {\n    smallHouseObj.rotation.x = 0.5;\n    hotSpotScale = 0.7;\n    hotSpotDistance = -30;\n    hotSpotDirection = -0.5;\n    hotSpotNameDirection = -38 / 13;\n    hotSpotNameDistance = 13;\n    var houseShapePath = domain + houseId + '/FloorPlans/' + houseId + '.png';\n    textureLoader.load(houseShapePath, createHUDSprites);\n    hotSpotGroup = new THREE.Group();\n    hotSpotGroup.visible = false;\n    mapGroup.add(hotSpotGroup);\n    hotSpotNameTag = createTextSprite('', {\n        fontsize: 50,\n        backgroundColor: {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0.498039\n        },\n        cornerAngle: 12\n    });\n    hotSpotNameTag.scale.set(210, 30, 1);\n    hotSpotNameTag.visible = false;\n    hotSpotGroup.add(hotSpotNameTag);\n}\nfunction createHUDSprites(texture) {\n    var factor = 500 / Math.max(houseSize.x, houseSize.z);\n    var samllHouseScale = factor * 0.0011;\n    smallHouseObj.scale.set(samllHouseScale, samllHouseScale, samllHouseScale);\n    var hotSpotGroupScale = factor * 1.1;\n    hotSpotGroup.scale.set(hotSpotGroupScale, hotSpotGroupScale, hotSpotGroupScale);\n    textureLoader.load('src/textures/button_Auto.png');\n    textureLoader.load('src/textures/button_2D_pressed.png');\n    textureLoader.load('src/textures/button_3D_pressed.png');\n    var switchAutoButtonTexture = textureLoader.load('src/textures/button_Auto_pressed.png');\n    var switchAutoButtonMaterial = new THREE.SpriteMaterial({ map: switchAutoButtonTexture });\n    switchAutoButton = new THREE.Sprite(switchAutoButtonMaterial);\n    switchAutoButton.scale.set(50, 25, 1);\n    register2DClickEvent(switchAutoButton, onSwitchAutoButtonClicked);\n    buttonGroup.add(switchAutoButton);\n    var switch2DButtonTexture = textureLoader.load('src/textures/button_2D.png');\n    var switch2DButtonMaterial = new THREE.SpriteMaterial({ map: switch2DButtonTexture });\n    switch2DButton = new THREE.Sprite(switch2DButtonMaterial);\n    switch2DButton.scale.set(40, 25, 1);\n    register2DClickEvent(switch2DButton, onSwitch2DButtonClicked);\n    buttonGroup.add(switch2DButton);\n    var switch3DButtonTexture = textureLoader.load('src/textures/button_3D.png');\n    var switch3DButtonMaterial = new THREE.SpriteMaterial({ map: switch3DButtonTexture });\n    switch3DButton = new THREE.Sprite(switch3DButtonMaterial);\n    switch3DButton.scale.set(40, 25, 1);\n    register2DClickEvent(switch3DButton, onSwitch3DButtonClicked);\n    buttonGroup.add(switch3DButton);\n    var sectorTexture = textureLoader.load('src/textures/sector.png');\n    var sectorMaterial = new THREE.SpriteMaterial({ map: sectorTexture });\n    sectorSprite = new THREE.Sprite(sectorMaterial);\n    sectorSprite.scale.set(100, 100, 1);\n    sectorSprite.material.opacity = 0.5;\n    hotSpotGroup.add(sectorSprite);\n    lastSectorSpriteRotation = camera.rotation.y;\n    var hotSpotTexture = textureLoader.load('src/textures/hotSpotPoint.png');\n    var hotSpotMaterial = new THREE.SpriteMaterial({ map: hotSpotTexture });\n    for (var index in allHotSpots) {\n        var hotSpot = allHotSpots[index].tag;\n        var hotSpotSprite = new THREE.Sprite(hotSpotMaterial);\n        hotSpotSprite.tag = hotSpot;\n        hotSpotSprite.name = allHotSpots[index].tagName;\n        hotSpotSprite.material.opacity = 0.7;\n        hotSpotSprite.scale.set(30, 30, 1);\n        hotSpotSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n        hotSpot.floorPlanPosition = hotSpotSprite.position.clone();\n        register2DClickEvent(hotSpotSprite, function (hotSpotObj) {\n            onThumbnailClicked(hotSpotObj.tag.thumbnailElement, true);\n        });\n        hotSpotGroup.add(hotSpotSprite);\n    }\n    var houseShapeMaterial = new THREE.SpriteMaterial({ map: texture });\n    houseShapeSprite = new THREE.Sprite(houseShapeMaterial);\n    var houseShapeScale = factor * 0.8;\n    houseShapeSprite.scale.set(houseSize.x * houseShapeScale, houseSize.z * houseShapeScale, 1);\n    houseShapeSprite.material.opacity = 0.9;\n    houseShapeSprite.visible = false;\n    mapGroup.add(houseShapeSprite);\n    var bgTexture = textureLoader.load('src/textures/bg.png', function () {\n        sceneOrtho.visible = true;\n        for (var roomIndex in house.Rooms) {\n            var room = house.Rooms[roomIndex];\n            for (var faceIndex in room.RoomFaces) {\n                var roomFace = room.RoomFaces[faceIndex];\n                loadFaceTexture(roomFace, houseObj.children[roomIndex], smallHouseObj.children[roomIndex]);\n            }\n        }\n    });\n    var buttonGroupBgMaterial = new THREE.SpriteMaterial({ map: bgTexture });\n    buttonGroupBgSprite = new THREE.Sprite(buttonGroupBgMaterial);\n    buttonGroupBgSprite.material.opacity = 0.5;\n    buttonGroupBgSprite.material.color = 16777215;\n    buttonGroupBgSprite.scale.set(mapWidth, buttongGroupBgHeight, 1);\n    buttonGroup.add(buttonGroupBgSprite);\n    var material = new THREE.SpriteMaterial({ map: bgTexture });\n    mapBgSprite = new THREE.Sprite(material);\n    mapBgSprite.material.opacity = 0.5;\n    mapBgSprite.material.color = 0;\n    mapBgSprite.scale.set(mapWidth, mapHeight, 1);\n    register2DClickEvent(mapBgSprite, onSwitchToOverviewClicked);\n    mapGroup.add(mapBgSprite);\n    updateHUDSprites();\n    for (var index in allHotSpots) {\n        if (allHotSpots[index].tag == clickedHotSpot) {\n            hotSpotNameTag.position.set(allHotSpots[index].tag.floorPlanPosition.x + hotSpotNameDistance, allHotSpots[index].tag.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n            updateTextSprite(hotSpotNameTag, allHotSpots[index].tag.Name.split('-')[0]);\n            sectorSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n            break;\n        }\n    }\n    switchToMap(true);\n}\nfunction updateHUDSprites() {\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    mapScale = SCREEN_WIDTH / mapWidth * 0.4;\n    if (SCREEN_WIDTH > SCREEN_HEIGHT) {\n        mapScale = SCREEN_HEIGHT / mapHeight * 0.4;\n    }\n    mapGroup.scale.set(mapScale, mapScale, 1);\n    mapGroup.position.set((-SCREEN_WIDTH + mapWidth * mapScale) / 2, (SCREEN_HEIGHT - mapHeight * mapScale) / 2, 1);\n    if (buttonGroupBgSprite != undefined) {\n        buttonGroupBgSprite.scale.set(mapWidth * mapScale, buttongGroupBgHeight, 1);\n        switch3DButton.position.set((mapWidth * mapScale - 25 - 20) / 2, 0, 1);\n        switch2DButton.position.set(switch3DButton.position.x - 45, 0, 1);\n        switchAutoButton.position.set(switch2DButton.position.x - 50, 0, 1);\n    }\n    buttonGroup.position.set((-SCREEN_WIDTH + mapWidth * mapScale) / 2, SCREEN_HEIGHT / 2 - mapHeight * mapScale - buttongGroupBgHeight / 2 - 0.5, 1);\n}\nfunction checkIsPhone() {\n    var sUserAgent = navigator.userAgent.toLowerCase();\n    var bIsIpad = sUserAgent.match(/ipad/i) == 'ipad';\n    var bIsIphoneOs = sUserAgent.match(/iphone os/i) == 'iphone os';\n    var bIsMidp = sUserAgent.match(/midp/i) == 'midp';\n    var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == 'rv:1.2.3.4';\n    var bIsUc = sUserAgent.match(/ucweb/i) == 'ucweb';\n    var bIsAndroid = sUserAgent.match(/android/i) == 'android';\n    var bIsCE = sUserAgent.match(/windows ce/i) == 'windows ce';\n    var bIsWM = sUserAgent.match(/windows mobile/i) == 'windows mobile';\n    var isPhone = bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM;\n    return isPhone;\n}\nfunction render() {\n    if (SCREEN_WIDTH != window.innerWidth || SCREEN_HEIGHT != window.innerHeight) {\n        SCREEN_WIDTH = window.innerWidth;\n        SCREEN_HEIGHT = window.innerHeight;\n        debugLog('R_SCREEN_WIDTH:' + SCREEN_WIDTH);\n        debugLog('R_SCREEN_HEIGHT' + SCREEN_HEIGHT);\n        resizeWindow();\n    }\n    if (openStats) {\n        stats.update();\n    }\n    cameraZoomAnimation();\n    camera.updateProjectionMatrix();\n    requestAnimationFrame(render);\n    for (var index in allHotSpots) {\n        allHotSpots[index].rotation.y = camera.rotation.y;\n    }\n    if (smallHouseObj != undefined && sceneSmallHouse.visible) {\n        if (isAutoRotate) {\n            smallHouseObj.rotation.y -= 0.0025;\n        } else {\n            smallHouseObj.rotation.y = -camera.rotation.y;\n        }\n    }\n    if (houseShapeSprite) {\n        if (lastSectorSpriteRotation != camera.rotation.y && isAutoButtonPressed && !isOverview) {\n            lastSectorSpriteRotation = camera.rotation.y;\n            stopAutoPlay();\n            starAutoPlayDelay();\n            switchToMap(true);\n        }\n        if (houseShapeSprite.visible) {\n            sectorSprite.material.rotation = camera.rotation.y - 0.6;\n            raycaster.setFromCamera(mouse, cameraOrtho);\n            var intersects = raycaster.intersectObjects(clickableObjects2D);\n            if (intersects.length > 0 && intersects[0].object.tag != undefined) {\n                mouseHoverObj = intersects[0].object;\n                hotSpotNameTag.position.set(mouseHoverObj.position.x + hotSpotNameDistance, mouseHoverObj.position.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n                updateTextSprite(hotSpotNameTag, mouseHoverObj.name);\n            } else {\n                if (clickedHotSpot != undefined) {\n                    hotSpotNameTag.position.set(clickedHotSpot.floorPlanPosition.x + hotSpotNameDistance, clickedHotSpot.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n                    updateTextSprite(hotSpotNameTag, clickedHotSpot.Name.split('-')[0]);\n                }\n            }\n        }\n    }\n    renderer.clear();\n    renderer.clearDepth();\n    if (isEnableVRMode) {\n        if (!emulateVRControl) {\n            vrControls.update();\n        }\n        if (isVREnabled) {\n            vrEffect.render(scene, camera);\n            checkVRIntersect();\n        } else {\n            renderCamera();\n        }\n    } else {\n        renderCamera();\n        if (overviewCameraController.enabled) {\n            overviewCameraController.update();\n        }\n    }\n}\nfunction renderCamera() {\n    if (!isSingleMode) {\n        renderer.setViewport(0, SCREEN_HEIGHT - mapHeight * mapScale, mapWidth * mapScale, mapHeight * mapScale);\n        renderer.render(sceneSmallHouse, cameraSmallHouse);\n        renderer.setViewport(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\n        renderer.render(scene, camera);\n        renderer.render(sceneOrtho, cameraOrtho);\n    } else {\n        renderer.render(scene, camera);\n    }\n}\nfunction initVRCrosshair() {\n    crosshair = new THREE.Mesh(new THREE.RingGeometry(0.02, 0.04, 32), new THREE.MeshBasicMaterial({\n        color: 16777215,\n        opacity: 0.5,\n        transparent: true\n    }));\n    crosshair.visible = false;\n    crosshair.position.z = -2;\n    camera.add(crosshair);\n}\nfunction showAllRooms(show) {\n    for (var index in allRooms) {\n        allRooms[index].visible = show;\n    }\n    if (show && isShowThumbnail) {\n        var thumbnailList = $('#thumbnail-list').children('#thumbnail');\n        for (var index in thumbnailList) {\n            if (thumbnailList[index].thumbnailData.isSelected) {\n                thumbnailList[index].onclick();\n                break;\n            }\n        }\n    }\n}\nfunction initLight() {\n    var light;\n    scene.add(new THREE.AmbientLight(6710886));\n    light = new THREE.DirectionalLight(14674943, 0.3);\n    light.position.set(0, 200, 0);\n    light.position.multiplyScalar(1.3);\n    light.castShadow = true;\n    light.shadow.mapSize.width = 1024;\n    light.shadow.mapSize.height = 1024;\n    var d = 300;\n    light.shadow.camera.left = -d;\n    light.shadow.camera.right = d;\n    light.shadow.camera.top = d;\n    light.shadow.camera.bottom = -d;\n    light.shadow.camera.far = 1000;\n    scene.add(light);\n}\nfunction initCameraControl() {\n    isZooming = false;\n    zoomSpeed = 2.5;\n    overviewCameraController = new THREE.OrbitControls(camera, renderer.domElement);\n    overviewCameraController.maxPolarAngle = THREE.Math.degToRad(90);\n    overviewCameraController.minPolarAngle = THREE.Math.degToRad(10);\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n    overviewCameraController.autoRotateSpeed = 1;\n    overviewCameraController.zoomSpeed = 0.5;\n    overviewCameraController.enableDamping = true;\n    overviewCameraController.dampingFactor = 0.8;\n    panoramaCameraController = new PanoramaControls(camera, renderer.domElement);\n    panoramaCameraController.enabled = false;\n}\nfunction initPanoramaView() {\n    var materials = [];\n    for (var i = 0; i < 6; i++) {\n        materials.push(new THREE.MeshBasicMaterial({ side: THREE.BackSide }));\n    }\n    skyBox = new THREE.Mesh(new THREE.CubeGeometry(5000, 5000, 5000), new THREE.MultiMaterial(materials));\n    skyBox.visible = false;\n    background.visible = true;\n    var logoSize = 300;\n    var texture = textureLoader.load('src/textures/logo.png');\n    texture.minFilter = THREE.NearestFilter;\n    var planeGeometry = new THREE.PlaneBufferGeometry(logoSize, logoSize, 1, 1);\n    var planeMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n    });\n    logoPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n    logoPlane.rotation.x = THREE.Math.degToRad(270);\n    logoPlane.position.y = -400;\n    skyBox.add(logoPlane);\n    scene.add(skyBox);\n}\nfunction createHotSpots() {\n    var texture = textureLoader.load('src/textures/hotspot/feet.png');\n    var spriteTexture = textureLoader.load('src/textures/hotspot_sprite.png');\n    texture.minFilter = THREE.NearestFilter;\n    var planeMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true\n    });\n    var lightMeshHeight = 70;\n    var lightRadius = 12;\n    var hotSpotNameHeight = 40;\n    var deltaHeight = -house.CameraHeight + 4.5;\n    var lightTexture = textureLoader.load('src/textures/hotspot/light.png');\n    lightTexture.minFilter = THREE.NearestFilter;\n    var lightGeometry = new THREE.CylinderGeometry(lightRadius, lightRadius, lightMeshHeight, 30, 1, true);\n    var lightMaterial = new THREE.MeshBasicMaterial({\n        map: lightTexture,\n        transparent: true,\n        depthWrite: false,\n        side: THREE.DoubleSide\n    });\n    var hotSpotNames = [];\n    for (var hotSpotIndex in house.HotSpots) {\n        var hotSpot = house.HotSpots[hotSpotIndex];\n        var hotSpotObj = new THREE.Group();\n        var hotSpotPosition = new THREE.Vector3(hotSpot.Position.x, hotSpot.Position.y + deltaHeight, -hotSpot.Position.z);\n        hotSpotObj.position.copy(hotSpotPosition);\n        scene.add(hotSpotObj);\n        allHotSpots.push(hotSpotObj);\n        hotSpot.gameObject = hotSpotObj;\n        hotSpotObj.tag = hotSpot;\n        var hotSpotName = hotSpot.Name;\n        if (hotSpot.Type == 'Door' && hotSpot.Name.split('-').length > 2) {\n            hotSpotName = hotSpot.Name.substring(0, hotSpot.Name.lastIndexOf('-'));\n        }\n        if (hotSpot.Type == 'Room' && hotSpot.Name.split('-').length > 1) {\n            hotSpotName = hotSpot.Name.split('-')[0];\n        }\n        hotSpotObj.tagName = hotSpotName;\n        hotSpot.IsSecondFloor = hotSpot.Position.y > 100;\n        var lightObj = new THREE.Mesh(lightGeometry, lightMaterial);\n        hotSpotObj.add(lightObj);\n        hotSpotObj.lightObj = lightObj;\n        lightObj.position.set(0, lightMeshHeight / 2, 0);\n        lightObj.name = hotSpot.Name;\n        registerClickEvent(lightObj, function (lightObj) {\n            onThumbnailClicked(lightObj.parent.tag.thumbnailElement, true);\n        });\n        var clickableGroupMaterial = new THREE.SpriteMaterial({ opacity: 0 });\n        var clickableGroup = new THREE.Sprite(clickableGroupMaterial);\n        hotSpotObj.add(clickableGroup);\n        hotSpotObj.clickableGroup = clickableGroup;\n        clickableGroup.position.set(0, lightObj.position.y, 0);\n        var circleSprite = createHotSpotSprite(spriteTexture, hotSpotPosition);\n        clickableGroup.add(circleSprite);\n        circleSprite.position.set(0, 0, 0);\n        circleSprite.visible = false;\n        hotSpotObj.circleSprite = circleSprite;\n        var planeGeometry = new THREE.PlaneBufferGeometry(12, 12, 1, 1);\n        var feetPlane = new THREE.Mesh(planeGeometry, planeMaterial);\n        feetPlane.rotation.x = THREE.Math.degToRad(270);\n        feetPlane.position.y = -lightMeshHeight / 2;\n        lightObj.add(feetPlane);\n        if (hotSpotName.split('-').length > 1 || contains(hotSpotNames, hotSpotName)) {\n            continue;\n        }\n        var hotSpotNameSprite = createTextSprite(hotSpotName, {\n            fontsize: 50,\n            backgroundColor: {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0.498039\n            },\n            cornerAngle: 12\n        });\n        clickableGroup.add(hotSpotNameSprite);\n        hotSpotNameSprite.y = 6;\n        hotSpotNameSprite.position.set(0, hotSpotNameSprite.y, 0);\n        hotSpotNameSprite.name = hotSpot.Name + hotSpotNameSuffix;\n        hotSpotNameSprite.visible = false;\n        hotSpotObj.hotSpotNameSprite = hotSpotNameSprite;\n        hotSpotNames.push(hotSpotName);\n        registerClickEvent(hotSpotNameSprite, function (hotSpotNameSprite) {\n            onThumbnailClicked(hotSpotNameSprite.parent.parent.tag.thumbnailElement, true);\n        });\n        var overviewHotSpotNameSprite = createTextSprite(hotSpotName, {\n            fontsize: 250,\n            backgroundColor: {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0.498039\n            },\n            cornerAngle: 40\n        });\n        hotSpotObj.add(overviewHotSpotNameSprite);\n        overviewHotSpotNameSprite.position.set(0, lightObj.position.y + hotSpotNameHeight, 0);\n        overviewHotSpotNameSprite.name = hotSpot.Name + overViewHotSpotNameSuffix;\n        hotSpotObj.overviewHotSpotNameSprite = overviewHotSpotNameSprite;\n        registerClickEvent(overviewHotSpotNameSprite, onHotSpotNameClicked);\n        var material = new THREE.LineBasicMaterial({\n            color: 32768,\n            linewidth: 1\n        });\n        var geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(0, feetPlane.position.y, 0), new THREE.Vector3(0, lightObj.position.y - 7));\n        var line = new THREE.Line(geometry, material);\n        line.name = hotSpotLineName;\n        hotSpotObj.nameLine = line;\n        lightObj.add(line);\n    }\n}\nfunction resizeWindow() {\n    debugLog('resizeWindow');\n    SCREEN_WIDTH = window.innerWidth;\n    SCREEN_HEIGHT = window.innerHeight;\n    debugLog('SCREEN_WIDTH:' + SCREEN_WIDTH);\n    debugLog('SCREEN_HEIGHT' + SCREEN_HEIGHT);\n    camera.aspect = SCREEN_WIDTH / SCREEN_HEIGHT;\n    camera.updateProjectionMatrix();\n    if (!isSingleMode) {\n        cameraSmallHouse.aspect = mapWidth / mapHeight;\n        cameraSmallHouse.updateProjectionMatrix();\n        cameraOrtho.left = -SCREEN_WIDTH / 2;\n        cameraOrtho.right = SCREEN_WIDTH / 2;\n        cameraOrtho.top = SCREEN_HEIGHT / 2;\n        cameraOrtho.bottom = -SCREEN_HEIGHT / 2;\n        cameraOrtho.updateProjectionMatrix();\n        updateHUDSprites();\n    }\n    if (isVREnabled) {\n        vrEffect.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    } else {\n        renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n    }\n}\nfunction registerEventListener() {\n    renderer.domElement.addEventListener('touchstart', eventHandler, false);\n    renderer.domElement.addEventListener('touchend', eventHandler, false);\n    renderer.domElement.addEventListener('mousedown', eventHandler, false);\n    renderer.domElement.addEventListener('mouseup', eventHandler, false);\n    window.addEventListener('mousemove', onMouseMove, false);\n    window.addEventListener('orientationchange', onOrientionChangeDelay, false);\n}\nfunction onOrientionChangeDelay() {\n    debugLog('onOrientionChangeDelay');\n    onOrientionChange();\n}\nfunction onOrientionChange(event) {\n    var isLandscape = isLandscapeOrNot();\n    debugLog('onOrientionChange,isLandscape: ' + isLandscape);\n    if (isLandscape == undefined) {\n        return;\n    }\n    setOverviewCameraControllerDistance(isLandscape);\n    if (isEnableVRMode) {\n        if (isLandscape) {\n            if (!isVREnabled) {\n                switchVRMode(true);\n            }\n        } else {\n            if (isVREnabled) {\n                switchVRMode(false);\n            }\n        }\n    }\n    var thumbnailList = document.getElementById('thumbnail-list');\n    if (isLandscape) {\n        for (var index in thumbnailList.children) {\n            thumbnailList.children[index].classList.remove('col-xs-3');\n            thumbnailList.children[index].classList.add('col-xs-2');\n        }\n    } else {\n        for (var index in thumbnailList.children) {\n            thumbnailList.children[index].classList.remove('col-xs-2');\n            thumbnailList.children[index].classList.add('col-xs-3');\n        }\n    }\n}\nfunction isLandscapeOrNot() {\n    var isLandscape;\n    if (window.orientation == 180 || window.orientation == 0) {\n        isLandscape = false;\n    } else if (window.orientation == 90 || window.orientation == -90) {\n        isLandscape = true;\n    }\n    return isLandscape;\n}\nfunction onMouseMove(event) {\n    event.preventDefault();\n    mouse.x = event.clientX / renderer.domElement.clientWidth * 2 - 1;\n    mouse.y = -(event.clientY / renderer.domElement.clientHeight) * 2 + 1;\n}\nfunction eventHandler(event) {\n    if (event.type == 'touchstart' || event.type == 'mousedown') {\n        mouseDownTime = new Date().getTime();\n        isMouseDown = true;\n        if (!isSingleMode) {\n            mouseDownObject = getIntersectObj(event);\n        }\n        if (isOverview) {\n            overviewCameraController.autoRotate = false;\n        } else {\n        }\n    } else if (event.type == 'touchend' || event.type == 'mouseup') {\n        isMouseDown = false;\n        if (new Date().getTime() - mouseDownTime < 200 && !isSingleMode) {\n            var mouseUpObject = getIntersectObj(event);\n            if (mouseUpObject == mouseDownObject && mouseDownObject != undefined) {\n                mouseDownObject.onClick(mouseDownObject);\n            }\n        }\n        if (isOverview) {\n            if (autoRotateTimer != undefined) {\n                clearTimeout(autoRotateTimer);\n            }\n            autoRotateTimer = setTimeout(function () {\n                overviewCameraController.autoRotate = isOverviewAutoRotate;\n            }, 3000);\n        } else {\n            if (!isAutoRotate && isAutoButtonPressed) {\n                starAutoPlayDelay();\n            }\n        }\n    }\n}\nfunction registerClickEvent(object, onClick) {\n    clickableObjects.push(object);\n    object.onClick = onClick;\n}\nfunction register2DClickEvent(object, onClick) {\n    clickableObjects2D.push(object);\n    object.onClick = onClick;\n}\nfunction getIntersectObj(event) {\n    var inetsectObject;\n    event.preventDefault();\n    var x, y;\n    if (event.type == 'touchstart') {\n        x = event.touches[0].pageX;\n        y = event.touches[0].pageY;\n    } else if (event.type == 'touchend') {\n        x = event.changedTouches[0].pageX;\n        y = event.changedTouches[0].pageY;\n    } else {\n        x = event.clientX;\n        y = event.clientY;\n    }\n    mouse.x = x / renderer.domElement.clientWidth * 2 - 1;\n    mouse.y = -(y / renderer.domElement.clientHeight) * 2 + 1;\n    raycaster.setFromCamera(mouse, cameraOrtho);\n    var intersects = raycaster.intersectObjects(clickableObjects2D);\n    if (intersects.length > 0 && sceneOrtho.visible && (houseShapeSprite.visible && intersects[0].object.tag != undefined || intersects[0].object.tag == undefined)) {\n        inetsectObject = intersects[0].object;\n    } else {\n        raycaster.setFromCamera(mouse, camera);\n        intersects = raycaster.intersectObjects(clickableObjects);\n        if (intersects.length > 0) {\n            inetsectObject = intersects[0].object;\n        }\n    }\n    return inetsectObject;\n}\nfunction getVRIntersectObj() {\n    var inetsectObject;\n    raycaster.setFromCamera({\n        x: 0,\n        y: 0\n    }, camera);\n    var intersects = raycaster.intersectObjects(clickableObjects);\n    if (intersects.length > 0) {\n        inetsectObject = intersects[0].object;\n    }\n    return inetsectObject;\n}\nfunction checkVRIntersect() {\n    var intesectObject = getVRIntersectObj();\n    if (previousVRIntersectObj != intesectObject) {\n        if (vrGazeTimer != undefined) {\n            clearTimeout(vrGazeTimer);\n        }\n        if (intesectObject != undefined) {\n            vrGazeTimer = setTimeout(function () {\n                intesectObject.onClick(intesectObject);\n            }, 1500);\n        }\n        previousVRIntersectObj = intesectObject;\n    }\n}\nfunction onSwitchToHotSpotViewClicked() {\n    onThumbnailClicked(lastClickedHotSpot.thumbnailElement, true);\n}\nfunction onSwitchToOverviewClicked() {\n    if (houseShapeSprite.visible) {\n        return;\n    }\n    if (isAutoButtonPressed) {\n        stopAutoPlay();\n    }\n    if (isShowThumbnail) {\n        document.getElementById('thumbnail-controller').style.visibility = 'visible';\n    } else {\n        document.getElementById('thumbnail-controller').style.visibility = 'hidden';\n        closeMap();\n    }\n    switchToHotSpotViewDiv.style.visibility = 'visible';\n    zoomInDiv.style.visibility = 'hidden';\n    zoomOutDiv.style.visibility = 'hidden';\n    enterHotSpotTip.style.visibility = 'visible';\n    switchVRButton.style.visibility = 'hidden';\n    clickedHotSpot = null;\n    camera.position.copy(previousCameraPosition);\n    camera.fov = isVREnabled ? vrModeFov : 75;\n    camera.updateProjectionMatrix();\n    disposeSkyBoxTexture();\n    showOverviewHotSpotNames(true);\n    showOverviewHotSpot();\n    for (var index in allHotSpots) {\n        var scale = 1;\n        allHotSpots[index].scale.set(scale, 1, scale);\n    }\n    overviewCameraController.enabled = true;\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n    overviewCameraController.update();\n    panoramaCameraController.enabled = false;\n    skyBox.visible = false;\n    background.visible = true;\n    houseObj.visible = true;\n    isHotSpotClickble = true;\n    for (var index in allHotSpots) {\n        allHotSpots[index].visible = true;\n    }\n    showAllRooms(true);\n    isOverview = true;\n}\nfunction switchToHotSpotView() {\n    document.getElementById('thumbnail-controller').style.visibility = 'visible';\n    switchToHotSpotViewDiv.style.visibility = 'hidden';\n    zoomInDiv.style.visibility = 'visible';\n    zoomOutDiv.style.visibility = 'visible';\n    enterHotSpotTip.style.visibility = 'hidden';\n    switchVRButton.style.visibility = 'visible';\n    showOverviewHotSpotNames(false);\n    for (var index in allHotSpots) {\n        allHotSpots[index].visible = false;\n    }\n    overviewCameraController.enabled = false;\n    overviewCameraController.autoRotate = false;\n    panoramaCameraController.enabled = true;\n    previousCameraPosition = new THREE.Vector3(camera.position.x, camera.position.y, camera.position.z);\n    camera.rotation.x = 0;\n    skyBox.visible = true;\n    background.visible = false;\n    if (!isSingleMode && houseShapeSprite) {\n        sceneOrtho.visible = true;\n        switchToMap(houseShapeSprite.visible);\n    }\n    if (isAutoButtonPressed) {\n        starAutoPlayDelay();\n    }\n    if (!isOnlyPanoramaView) {\n        houseObj.visible = false;\n    }\n    showAllRooms(false);\n    isOverview = false;\n}\nfunction showOverviewHotSpot() {\n    for (var index in allHotSpots) {\n        allHotSpots[index].lightObj.visible = true;\n        allHotSpots[index].circleSprite.visible = false;\n        allHotSpots[index].nameLine.visible = true;\n    }\n}\nfunction showOverviewHotSpotNames(show) {\n    for (var index in allHotSpots) {\n        var overviewHotSpotName = allHotSpots[index].overviewHotSpotNameSprite;\n        if (overviewHotSpotName != undefined) {\n            overviewHotSpotName.visible = show;\n            allHotSpots[index].nameLine = show;\n        }\n        if (show) {\n            var hotSpotName = allHotSpots[index].hotSpotNameSprite;\n            if (hotSpotName) {\n                hotSpotName.visible = false;\n            }\n        }\n    }\n}\nfunction onHotSpotNameClicked(hotSpotNameObj) {\n    onThumbnailClicked(hotSpotNameObj.parent.tag.thumbnailElement, true);\n}\nfunction onFirstHotSpotClicked(hotSpot, onLoad, onProgress, onError) {\n    console.log('fisrt:' + hotSpot.Name);\n    if (!isHotSpotClickble || clickedHotSpot == hotSpot) {\n        return;\n    }\n    lastClickedHotSpot = hotSpot;\n    clickedHotSpot = hotSpot;\n    isHotSpotClickble = false;\n    if (hotSpot.cached == undefined || hotSpot.cached == false) {\n        document.getElementById('loading').style.visibility = 'visible';\n    }\n    var imageName;\n    if (isSingleMode) {\n        imageName = hotSpot.ImagePath;\n    } else {\n        imageName = hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    }\n    imageName = imageName.substring(0, imageName.lastIndexOf('.'));\n    var urls = [\n        rootPathPanoBlur + imageName + '_l.jpg',\n        rootPathPanoBlur + imageName + '_r.jpg',\n        rootPathPanoBlur + imageName + '_u.jpg',\n        rootPathPanoBlur + imageName + '_d.jpg',\n        rootPathPanoBlur + imageName + '_f.jpg',\n        rootPathPanoBlur + imageName + '_b.jpg'\n    ];\n    loadCubePanoramaTexture(urls, function (cubeTexture) {\n        onPanoramaImageLoad(cubeTexture, hotSpot);\n        if (onLoad) {\n            onLoad();\n        }\n    }, function (index, xhr) {\n        if (onProgress) {\n            onProgress(index, xhr);\n        }\n    }, function (xhr) {\n        isHotSpotClickble = true;\n        document.getElementById('loading').style.visibility = 'hidden';\n        if (onError) {\n            onError();\n        }\n    });\n}\nfunction onHotSpotClicked(hotSpot, onLoad, onProgress, onError) {\n    console.log(hotSpot.Name);\n    var imageName;\n    if (isSingleMode) {\n        imageName = hotSpot.ImagePath;\n    } else {\n        imageName = hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    }\n    imageName = imageName.substring(0, imageName.lastIndexOf('.'));\n    var urls = [\n        rootPathPanoTile + imageName + '_l.jpg',\n        rootPathPanoTile + imageName + '_r.jpg',\n        rootPathPanoTile + imageName + '_u.jpg',\n        rootPathPanoTile + imageName + '_d.jpg',\n        rootPathPanoTile + imageName + '_f.jpg',\n        rootPathPanoTile + imageName + '_b.jpg'\n    ];\n    loadCubePanoramaTexture(urls, function (cubeTexture) {\n        disposeSkyBoxTexture();\n        for (var i = 0; i < skyBox.material.materials.length; i++) {\n            skyBox.material.materials[i].map = cubeTexture[i];\n        }\n        if (onLoad) {\n            onLoad();\n        }\n    }, function (index, xhr) {\n        if (onProgress) {\n            onProgress(index, xhr);\n        }\n    }, function (xhr) {\n        isHotSpotClickble = true;\n        document.getElementById('loading').style.visibility = 'hidden';\n        if (onError) {\n            onError();\n        }\n    });\n}\nfunction onPanoramaImageLoad(cubeTexture, hotSpot) {\n    document.getElementById('loading').style.visibility = 'hidden';\n    if (isOverview) {\n        switchToHotSpotView();\n    }\n    camera.fov = isVREnabled ? vrModeFov : defaultFov;\n    panoramaCameraController.updateRotation();\n    disposeSkyBoxTexture();\n    for (var i = 0; i < skyBox.material.materials.length; i++) {\n        skyBox.material.materials[i].map = cubeTexture[i];\n    }\n    if (!isSingleMode) {\n        if (hotSpotNameTag) {\n            hotSpotNameTag.position.set(clickedHotSpot.floorPlanPosition.x + hotSpotNameDistance, clickedHotSpot.floorPlanPosition.y + hotSpotNameDistance * hotSpotNameDirection, 1);\n            updateTextSprite(hotSpotNameTag, clickedHotSpot.Name.split('-')[0]);\n            for (var index in allHotSpots) {\n                if (allHotSpots[index].tag == clickedHotSpot) {\n                    sectorSprite.position.set(allHotSpots[index].position.x * hotSpotScale, -allHotSpots[index].position.z * hotSpotScale, 1);\n                    break;\n                }\n            }\n        }\n        var cameraPosition = new THREE.Vector3(hotSpot.Position.x, hotSpot.Position.y, -hotSpot.Position.z);\n        camera.position.copy(cameraPosition);\n        camera.updateProjectionMatrix();\n        skyBox.position.copy(cameraPosition);\n        skyBox.rotation.y = THREE.Math.degToRad(180 - hotSpot.Rotation.y);\n        showVisibleHotSpots(hotSpot);\n    }\n    if (isFirstEnterHotSpotView) {\n        camera.rotation.x = 0;\n        camera.rotation.y = skyBox.rotation.y;\n        camera.rotation.z = 0;\n        panoramaCameraController.updateRotation();\n        isFirstEnterHotSpotView = false;\n    }\n    isHotSpotClickble = true;\n    hotSpot.cached = true;\n}\nfunction loadCubePanoramaTexture(urls, onLoad, onProgress, onError) {\n    var cubeTexture = [];\n    var loaded = 0;\n    function loadTexture(i) {\n        textureLoader.load(urls[i], function (texture) {\n            cubeTexture[i] = texture;\n            loaded++;\n            if (loaded === urls.length) {\n                if (onLoad)\n                    onLoad(cubeTexture);\n            }\n        }, function (xhr) {\n            if (onProgress) {\n                onProgress(i, xhr);\n            }\n        }, onError);\n    }\n    for (var i = 0; i < urls.length; i++) {\n        loadTexture(i);\n    }\n}\nfunction disposeSkyBoxTexture() {\n    for (var i = 0; i < skyBox.material.materials.length; i++) {\n        if (skyBox.material.materials[i].map != null) {\n            skyBox.material.materials[i].map.dispose();\n            skyBox.material.materials[i].map = null;\n        }\n    }\n}\nfunction showFirstHotSpot(hotSpotName, theta) {\n    var hotSpot;\n    if (hotSpotName) {\n        hotSpot = getHotSpotFromName(hotSpotName);\n    } else {\n        hotSpot = house.HotSpots[0];\n    }\n    if (!theta) {\n        theta = 0;\n    }\n    onHotSpotClicked(hotSpot, function () {\n        switchToOverviewDiv.style.visibility = 'hidden';\n        document.getElementById('welcome').style.visibility = 'hidden';\n        switchToHotSpotView();\n        camera.rotation.y = THREE.Math.degToRad(theta);\n        panoramaCameraController.updateRotation();\n        if (isShowThumbnail) {\n            createThumbnails(true);\n        }\n    }, function (index, xhr) {\n        firstCubProgress[index] = xhr.loaded / xhr.total;\n        var loadedProgress = 0;\n        for (var progressIndex in firstCubProgress) {\n            if (firstCubProgress[progressIndex] == undefined) {\n                firstCubProgress[progressIndex] = 0;\n            }\n            loadedProgress += firstCubProgress[progressIndex];\n        }\n        var value = parseInt(loadedProgress / 6 * 100);\n        var progressBar = document.getElementById('loading_progress_bar');\n        progressBar.style.width = value + '%';\n        progressBar.innerText = value + '%';\n    }, function () {\n        $('#loading_tip').text('加载失败');\n    });\n    document.getElementById('loading').style.visibility = 'hidden';\n}\nfunction showFirstHotSpotAfterLoading() {\n    var hotSpot = house.HotSpots[0];\n    onFirstHotSpotClicked(hotSpot, onResourcesPrepared, function (index, xhr) {\n        firstCubProgress[index] = xhr.loaded / xhr.total;\n        var loadedProgress = 0;\n        for (var progressIndex in firstCubProgress) {\n            if (firstCubProgress[progressIndex] == undefined) {\n                firstCubProgress[progressIndex] = 0;\n            }\n            loadedProgress += firstCubProgress[progressIndex];\n        }\n        var value = parseInt(loadedProgress / 6 * 100);\n        var progressBar = document.getElementById('loading_progress_bar');\n        progressBar.style.width = value + '%';\n        progressBar.innerText = value + '%';\n    }, function () {\n        $('#loading_tip').text('加载失败');\n    });\n    document.getElementById('loading').style.visibility = 'hidden';\n}\nfunction showVisibleHotSpots(hotSpot) {\n    var visibleHotSpots = [];\n    for (var index in hotSpot.VisibleHotSpots) {\n        visibleHotSpots.push(getHotSpotFromName(hotSpot.VisibleHotSpots[index]));\n    }\n    for (var index in allHotSpots) {\n        if (hotSpot == allHotSpots[index].tag) {\n            allHotSpots[index].visible = false;\n        } else {\n            var visible = contains(visibleHotSpots, allHotSpots[index].tag);\n            allHotSpots[index].visible = visible;\n            allHotSpots[index].lightObj.visible = false;\n            allHotSpots[index].circleSprite.visible = visible;\n            var textSprite = allHotSpots[index].hotSpotNameSprite;\n            if (!textSprite) {\n                continue;\n            }\n            textSprite.visible = visible;\n            if (visible) {\n                var distance = camera.position.distanceTo(allHotSpots[index].position.clone().add(textSprite.position));\n                var scale = distance * 0.08;\n                allHotSpots[index].circleSprite.scale.set(scale, scale, scale);\n                scale = 0.015 * distance;\n                var textSprite = allHotSpots[index].hotSpotNameSprite;\n                textSprite.scale.set(textSprite.material.map.scaleX * scale, textSprite.material.map.scaleY * scale, 1);\n                textSprite.position.y = textSprite.y * scale;\n            }\n        }\n    }\n}\nfunction contains(a, obj) {\n    var i = a.length;\n    while (i--) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction onSwitch2DButtonClicked() {\n    setAutoMode(false);\n    switchToMap(true);\n    switch2DButton.material.map = textureLoader.load('src/textures/button_2D_pressed.png');\n    switch3DButton.material.map = textureLoader.load('src/textures/button_3D.png');\n}\nfunction onSwitch3DButtonClicked() {\n    setAutoMode(false);\n    switchToMap(false);\n    switch2DButton.material.map = textureLoader.load('src/textures/button_2D.png');\n    switch3DButton.material.map = textureLoader.load('src/textures/button_3D_pressed.png');\n}\nfunction setAutoMode(needAutoMode) {\n    if (needAutoMode) {\n        switchAutoButton.material.map = textureLoader.load('src/textures/button_Auto_pressed.png');\n        starAutoPlayDelay();\n        isAutoButtonPressed = true;\n    } else {\n        stopAutoPlay();\n        isAutoButtonPressed = false;\n        switchAutoButton.material.map = textureLoader.load('src/textures/button_Auto.png');\n    }\n}\nfunction onSwitchAutoButtonClicked() {\n    if (isAutoButtonPressed) {\n        setAutoMode(false);\n        if (houseShapeSprite.visible) {\n            switch2DButton.material.map = textureLoader.load('src/textures/button_2D_pressed.png');\n        } else {\n            switch3DButton.material.map = textureLoader.load('src/textures/button_3D_pressed.png');\n        }\n    } else {\n        if (houseShapeSprite.visible) {\n            switch2DButton.material.map = textureLoader.load('src/textures/button_2D.png');\n        } else {\n            switch3DButton.material.map = textureLoader.load('src/textures/button_3D.png');\n        }\n        setAutoMode(true);\n    }\n}\nfunction onVRButtonClicked() {\n    onSwitchVRMode();\n}\nfunction cameraSwitchAnimation() {\n    if (isSwitching) {\n        console.log('camera: ' + camera.position.x + ',' + camera.position.y + ',' + camera.position.z);\n        console.log('previousCameraPosition: ' + previousCameraPosition.x + ',' + previousCameraPosition.y + ',' + previousCameraPosition.z);\n        if (camera.position.y > previousCameraPosition.y && camera.position.y - previousCameraPosition.y < 0.01 || camera.position.y < previousCameraPosition.y && camera.position.y - previousCameraPosition.y > -0.01) {\n            clickedHotSpot = null;\n            isSwitching = false;\n        } else {\n            camera.position.x += switchSpeed.x;\n            camera.position.y += switchSpeed.y;\n            camera.position.z += switchSpeed.z;\n            camera.rotation.x += rotationSpeed.x;\n            camera.rotation.z += rotationSpeed.z;\n        }\n    }\n}\nfunction cameraZoomAnimation() {\n    if (isZooming) {\n        if (zoomSpeed > 0 && camera.fov >= targetZoomFov || zoomSpeed < 0 && camera.fov <= targetZoomFov) {\n            isZooming = false;\n        } else {\n            camera.fov += zoomSpeed;\n        }\n    }\n}\nfunction onZoomInClicked() {\n    if (!isZooming) {\n        isZooming = true;\n        targetZoomFov = Math.max(50, Math.min(100, camera.fov - 25));\n        if (zoomSpeed > 0) {\n            zoomSpeed = -zoomSpeed;\n        }\n    }\n}\nfunction onZoomOutClicked() {\n    if (!isZooming) {\n        isZooming = true;\n        targetZoomFov = Math.max(50, Math.min(100, camera.fov + 25));\n        if (zoomSpeed < 0) {\n            zoomSpeed = -zoomSpeed;\n        }\n    }\n}\nfunction starAutoPlayDelay() {\n    if (autoPlayTimer != undefined) {\n        clearTimeout(autoPlayTimer);\n    }\n    autoPlayTimer = setTimeout(function () {\n        if (!isMouseDown) {\n            isAutoRotate = true;\n            switchToMap(!is3DPrepared);\n        }\n    }, 6000);\n}\nfunction stopAutoPlay() {\n    console.log('stopAutoPlay');\n    if (autoPlayTimer != undefined) {\n        clearTimeout(autoPlayTimer);\n    }\n    isAutoRotate = false;\n}\nfunction switchToMap(showMap) {\n    if (!isSingleMode) {\n        houseShapeSprite.visible = showMap;\n        hotSpotGroup.visible = showMap;\n        sceneSmallHouse.visible = !showMap;\n        is3DMode = !showMap;\n    }\n}\nfunction starAutoPlay() {\n}\nfunction closeMap() {\n    sceneSmallHouse.visible = false;\n    sceneOrtho.visible = false;\n    stopAutoPlay();\n}\nfunction onSwitchFullscreenButtonClicked() {\n    isFullscreen = !isFullscreen;\n    if (!isFullscreen) {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n        }\n    } else {\n        if (document.documentElement.requestFullscreen) {\n            document.documentElement.requestFullscreen();\n        } else if (document.documentElement.mozRequestFullScreen) {\n            document.documentElement.mozRequestFullScreen();\n        } else if (document.documentElement.webkitRequestFullscreen) {\n            document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n        } else if (document.body.msRequestFullscreen) {\n            document.body.msRequestFullscreen();\n        }\n    }\n    switchFullscreenButton.innerText = isFullscreen ? '退出全屏' : '全屏';\n    isOverviewAutoRotate = !isFullscreen;\n    overviewCameraController.autoRotate = isOverviewAutoRotate;\n}\nfunction createHouse() {\n    totalPanoramaImageCount = house.HotSpots.length;\n    houseObj = new THREE.Object3D();\n    houseObj.name = house.Name;\n    scene.add(houseObj);\n    smallHouseObj = houseObj.clone();\n    sceneSmallHouse.add(smallHouseObj);\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        var roomObj = new THREE.Object3D();\n        roomObj.name = room.Name;\n        roomObj.position.set(room.Position.x, room.Position.y, -room.Position.z);\n        roomObj.rotation.set(0, THREE.Math.degToRad(-room.Rotation), 0);\n        houseObj.add(roomObj);\n        allRooms.push(roomObj);\n        room.gameObject = roomObj;\n        if (!room.IsSecondFloor) {\n            room.IsSecondFloor = room.Position.y > 100;\n        }\n        var smallRoomObj = roomObj.clone();\n        smallHouseObj.add(smallRoomObj);\n        for (var faceIndex in room.RoomFaces) {\n            totalRoomFaceCount++;\n        }\n    }\n    houseObj.scale.set(houseScale, houseScale, houseScale);\n    houseSize = getHouseSize(house);\n    return house;\n}\nfunction getHotSpotFromName(hotSpotName) {\n    var hotSpot;\n    for (var hotSpotIndex in house.HotSpots) {\n        if (house.HotSpots[hotSpotIndex].Name == hotSpotName) {\n            hotSpot = house.HotSpots[hotSpotIndex];\n            break;\n        }\n    }\n    return hotSpot;\n}\nfunction loadFaceTexture(roomFace, roomObj, smallRoomObj) {\n    var faceTexturePath = roomFace.ImagePath.replace(ossHost, domain);\n    var texture = textureLoader.load(faceTexturePath, function (loadedTexture) {\n        loadedTexture.minFilter = THREE.LinearFilter;\n        var planeGeometry = new THREE.PlaneBufferGeometry(roomFace.Width, roomFace.Height, 1, 1);\n        var planeMaterial = new THREE.MeshBasicMaterial({\n            map: loadedTexture,\n            side: THREE.BackSide,\n            alphaTest: 0.1\n        });\n        planeMaterial.transparent = true;\n        planeMaterial.depthWrite = true;\n        var facePlane = new THREE.Mesh(planeGeometry, planeMaterial);\n        facePlane.rotation.reorder('YXZ');\n        facePlane.rotation.set(THREE.Math.degToRad(roomFace.Rotation.x), THREE.Math.degToRad(roomFace.Rotation.y), THREE.Math.degToRad(roomFace.Rotation.z));\n        facePlane.position.set(roomFace.Position.x, roomFace.Position.y, -roomFace.Position.z);\n        roomFace.facePlane = facePlane;\n        roomObj.add(facePlane);\n        var smallFacePlane = facePlane.clone();\n        smallRoomObj.add(smallFacePlane);\n    }, function (xhr) {\n        onRoomFaceTextureLoading(roomFace, xhr);\n    });\n    return texture;\n}\nfunction setOverviewCameraControllerDistance(isLandscape) {\n    debugLog('setOverviewCameraControllerDistance');\n    if (houseSize == undefined || overviewCameraController == undefined) {\n        return;\n    }\n    var factor = Math.min(houseSize.x, houseSize.z) * houseScale * 0.0025;\n    overviewCameraController.minDistance = 370 * factor;\n    overviewCameraController.maxDistance = 900 * factor;\n    if (isLandscape) {\n        overviewCameraController.minDistance -= 80 * factor;\n        overviewCameraController.maxDistance -= 200 * factor;\n    }\n}\nfunction setDefaultCameraPosition(isLandscape) {\n    var theta = 60;\n    var phi = 60;\n    var radius = 650;\n    var d = Math.cos(THREE.Math.degToRad(phi)) * radius;\n    var x = Math.sin(THREE.Math.degToRad(theta)) * d;\n    var y = Math.sin(THREE.Math.degToRad(phi)) * radius;\n    var z = -Math.cos(THREE.Math.degToRad(theta)) * d;\n    var factor = Math.max(houseSize.x, houseSize.z) * houseScale * 0.002;\n    var defaultCameraPosition = new THREE.Vector3(x * factor, y * factor, z * factor);\n    if (isLandscape) {\n        defaultCameraPosition.x += 100 * factor;\n        defaultCameraPosition.y -= 50 * factor;\n        defaultCameraPosition.z += 100 * factor;\n    }\n    camera.position.copy(defaultCameraPosition);\n}\nfunction getHouseSize(house) {\n    var minX, maxX;\n    var minY, maxY;\n    var minZ, maxZ;\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        for (var faceIndex in room.RoomFaces) {\n            var roomFace = room.RoomFaces[faceIndex];\n            if (roomIndex == 0 && faceIndex == 0) {\n                minX = maxX = room.Position.x + roomFace.Position.x;\n                minY = maxY = room.Position.y + roomFace.Position.y;\n                minZ = maxZ = room.Position.z + roomFace.Position.z;\n            } else {\n                minX = Math.min(minX, room.Position.x + roomFace.Position.x);\n                maxX = Math.max(maxX, room.Position.x + roomFace.Position.x);\n                minY = Math.min(minY, room.Position.y + roomFace.Position.y);\n                maxY = Math.max(maxY, room.Position.y + roomFace.Position.y);\n                minZ = Math.min(minZ, -room.Position.z - roomFace.Position.z);\n                maxZ = Math.max(maxZ, -room.Position.z - roomFace.Position.z);\n            }\n        }\n    }\n    return new THREE.Vector3(maxX - minX, maxY - minY, maxZ - minZ);\n}\nfunction onRoomFaceTextureLoading(roomFace, xhr) {\n    roomFace.loadedProgress = xhr.loaded / xhr.total;\n    var loadedProgress = 0;\n    for (var roomIndex in house.Rooms) {\n        var room = house.Rooms[roomIndex];\n        for (var faceIndex in room.RoomFaces) {\n            var face = room.RoomFaces[faceIndex];\n            if (face.loadedProgress == undefined) {\n                face.loadedProgress = 0;\n            }\n            loadedProgress += face.loadedProgress;\n        }\n    }\n    var value = parseInt(loadedProgress / totalRoomFaceCount * 100);\n    if (value == 100) {\n        setTimeout(on3DHousePrepared, 500);\n    }\n}\nfunction on3DHousePrepared() {\n    console.log('on3DHousePrepared');\n    is3DPrepared = true;\n    is3DMode = true;\n    switchToMap(false);\n    starAutoPlayDelay();\n}\nfunction onResourcesPrepared() {\n    console.log('ResoucePrepared');\n    createThumbnails(true);\n    var hotSpot = house.HotSpots[0];\n    onHotSpotClicked(hotSpot);\n    onThumbnailClicked(hotSpot.thumbnailElement, false);\n    initMap();\n    document.getElementById('welcome').style.visibility = 'hidden';\n    $('#controlTip')[0].style.visibility = 'visible';\n    setTimeout(function () {\n        $('#controlTip').fadeOut(3000);\n    }, 2000);\n    document.getElementById('controlDiv').style.visibility = 'visible';\n    starAutoPlay();\n}\nfunction onSwitchVRMode() {\n    isEnableVRMode = !isEnableVRMode;\n    if (!isOnlyPanoramaView) {\n    }\n    if (isEnableVRMode) {\n        if (isLandscapeOrNot()) {\n            switchVRMode(true);\n        } else {\n            vrStartTip.style.visibility = 'visible';\n            vrStartTip.style.opacity = 1;\n            $('#vrStartTip').stop();\n            $('#vrStartTip').show();\n            panoramaCameraController.enabled = false;\n            $('#vrStartTip').fadeOut(5000);\n        }\n    } else {\n        switchVRMode(false);\n    }\n}\nfunction getParameterByName(name) {\n    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);\n    return match && decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\nfunction switchVRMode(enable) {\n    camera.fov = enable ? vrModeFov : defaultFov;\n    isVREnabled = enable;\n    crosshair.visible = enable;\n    if (!enable) {\n        disableVRMode();\n    } else {\n        enableVRMode();\n    }\n    if (emulateVRControl) {\n        if (enable) {\n            panoramaCameraController.enabled = true;\n        } else if (isOverview) {\n            panoramaCameraController.enabled = false;\n        }\n    }\n}\nfunction enableVRMode() {\n    if (isOverview) {\n        overviewCameraController.enabled = false;\n        camera.position.x = 100;\n        camera.position.y = 250;\n        camera.position.z = 300;\n    } else {\n        panoramaCameraController.enabled = false;\n        $('#vrStartTip').stop();\n    }\n    vrStartTip.style.visibility = 'hidden';\n}\nfunction disableVRMode() {\n    if (isOverview) {\n        overviewCameraController.enabled = true;\n        overviewCameraController.update();\n    } else {\n        camera.rotation.z = 0;\n        panoramaCameraController.enabled = true;\n        stopAutoPlay();\n        starAutoPlayDelay();\n        panoramaCameraController.updateRotation();\n    }\n    if (vrGazeTimer != undefined) {\n        clearTimeout(vrGazeTimer);\n    }\n    vrStartTip.style.visibility = 'hidden';\n}\nfunction debugLog(message) {\n    if (isDebugMode) {\n        debugTextValue += message;\n        debugTextValue += '\\n';\n        debugText.value = debugTextValue;\n    }\n}\nfunction createTextSprite(message, parameters) {\n    var texture = createTextTexture(message, parameters);\n    var spriteMaterial = new THREE.SpriteMaterial({ map: texture });\n    var sprite = new THREE.Sprite(spriteMaterial);\n    sprite.scale.set(texture.scaleX, texture.scaleY, 1);\n    return sprite;\n}\nfunction createTextTexture(message, parameters) {\n    if (parameters === undefined)\n        parameters = {};\n    var fontface = parameters.hasOwnProperty('fontface') ? parameters['fontface'] : 'Arial';\n    var fontsize = parameters.hasOwnProperty('fontsize') ? parameters['fontsize'] : 18;\n    var borderThickness = parameters.hasOwnProperty('borderThickness') ? parameters['borderThickness'] : 0;\n    var borderColor = parameters.hasOwnProperty('borderColor') ? parameters['borderColor'] : {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 1\n    };\n    var backgroundColor = parameters.hasOwnProperty('backgroundColor') ? parameters['backgroundColor'] : {\n        r: 255,\n        g: 255,\n        b: 255,\n        a: 1\n    };\n    var cornerAngle = parameters.hasOwnProperty('cornerAngle') ? parameters['cornerAngle'] : 10;\n    var canvas = document.createElement('canvas');\n    canvas.width = fontsize * 12;\n    canvas.height = fontsize * 1.4;\n    var context = canvas.getContext('2d');\n    context.font = 'normal ' + fontsize + 'px ' + fontface;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    var metrics = context.measureText(message);\n    var textWidth = metrics.width;\n    var x = (canvas.width + borderThickness) / 2;\n    var y = (canvas.height + borderThickness) / 2;\n    context.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + backgroundColor.a + ')';\n    context.strokeStyle = 'rgba(' + borderColor.r + ',' + borderColor.g + ',' + borderColor.b + ',' + borderColor.a + ')';\n    context.lineWidth = borderThickness;\n    var border = 100;\n    roundRect(context, (canvas.width - textWidth - border) / 2, 0, textWidth + border, canvas.height, cornerAngle);\n    context.fillStyle = 'rgba(255, 255, 255, 1.0)';\n    context.fillText(message, x, y);\n    var texture = new THREE.Texture(canvas);\n    texture.minFilter = THREE.LinearFilter;\n    texture.needsUpdate = true;\n    texture.parameters = parameters;\n    texture.scaleX = canvas.width * 0.05;\n    texture.scaleY = canvas.height * 0.05;\n    return texture;\n}\nfunction updateTextSprite(textSprite, message) {\n    var texture = createTextTexture(message, textSprite.material.map.parameters);\n    textSprite.material.map.dispose();\n    textSprite.material.map = texture;\n}\nfunction roundRect(ctx, x, y, w, h, r) {\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.lineTo(x + w - r, y);\n    ctx.quadraticCurveTo(x + w, y, x + w, y + r);\n    ctx.lineTo(x + w, y + h - r);\n    ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n    ctx.lineTo(x + r, y + h);\n    ctx.quadraticCurveTo(x, y + h, x, y + h - r);\n    ctx.lineTo(x, y + r);\n    ctx.quadraticCurveTo(x, y, x + r, y);\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke();\n}\nfunction createHotSpotSprite(texture) {\n    var clickEvent = function clickEvent(circleSprite) {\n        onThumbnailClicked(circleSprite.parent.parent.tag.thumbnailElement, true);\n    };\n    var spriteGroupMaterial = new THREE.SpriteMaterial({ opacity: 0 });\n    var spriteGroup = new THREE.Sprite(spriteGroupMaterial);\n    spriteGroup.scale.set(10, 10, 1);\n    registerClickEvent(spriteGroup, clickEvent);\n    var material1 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 1\n    });\n    var sprite1 = new THREE.Sprite(material1);\n    spriteGroup.add(sprite1);\n    var size = 0.25;\n    sprite1.scale.set(size, size, 1);\n    var material2 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 0.6\n    });\n    var sprite2 = new THREE.Sprite(material2);\n    spriteGroup.add(sprite2);\n    size = 0.75;\n    sprite2.scale.set(size, size, 1);\n    var material3 = new THREE.SpriteMaterial({\n        map: texture,\n        opacity: 0.2\n    });\n    var sprite3 = new THREE.Sprite(material3);\n    spriteGroup.add(sprite3);\n    size = 1;\n    sprite3.scale.set(size, size, 1);\n    animate();\n    function animate() {\n        var time = Date.now() / 1000;\n        var speed = 5;\n        var scale = 0.8 + Math.sin(time * speed) * 0.2;\n        var scale1 = scale * 0.25;\n        sprite1.scale.set(scale1, scale1, scale1);\n        var scale2 = scale * 0.6;\n        sprite2.scale.set(scale2, scale2, scale2);\n        var scale3 = scale;\n        sprite3.scale.set(scale3, scale3, scale3);\n        requestAnimationFrame(animate);\n    }\n    return spriteGroup;\n}\nfunction onThumbnailControllerClicked() {\n    if ($('#thumbnail-list')[0].style.display == 'none') {\n        $('#thumbnail-list').slideDown('slow');\n    } else {\n        $('#thumbnail-list').slideUp('slow');\n    }\n}\nfunction Thumbnail() {\n    this.imagePath;\n    this.name;\n    this.onclick;\n    this.isSelected = false;\n    this.click = function () {\n        if (this.onclick) {\n            this.onclick(this);\n        }\n    };\n}\nfunction createThumbnails(isVisible) {\n    if (isVisible) {\n        $('#thumbnail-controller')[0].style.visibility = 'visible';\n    } else {\n        $('#thumbnail-controller')[0].style.visibility = 'hidden';\n    }\n    var thumbnailList = getThumbnailList();\n    var template = $('#thumbnail');\n    for (var index in thumbnailList) {\n        var clonedThumbnail = template.clone().appendTo('#thumbnail-list');\n        clonedThumbnail.find('#thumbnail-name')[0].innerText = thumbnailList[index].name;\n        clonedThumbnail.find('#thumbnail-image')[0].src = thumbnailList[index].imagePath;\n        clonedThumbnail[0].onclick = function () {\n            onThumbnailClicked($(this), true);\n        };\n        clonedThumbnail[0].thumbnailData = thumbnailList[index];\n        if (!isSingleMode) {\n            var hotSpot = allHotSpots[index].tag;\n            hotSpot.thumbnailElement = clonedThumbnail;\n        }\n    }\n    template.remove();\n}\nfunction getThumbnailList() {\n    var thumbnailList = [];\n    for (var hotSpotIndex in house.HotSpots) {\n        var hotSpot = house.HotSpots[hotSpotIndex];\n        var thumbnail = instantiateThumbnail(hotSpot);\n        if (hotSpotIndex == 0) {\n            thumbnail.isSelected = true;\n        }\n        thumbnailList.push(thumbnail);\n    }\n    return thumbnailList;\n}\nfunction instantiateThumbnail(hotSpot) {\n    var thumbnailPath = domain + houseId + '/ThumbnailImages/' + hotSpot.ImagePath.substring(hotSpot.ImagePath.lastIndexOf('/') + 1);\n    var thumbnail = new Thumbnail();\n    thumbnail.name = hotSpot.Name.split('-')[0];\n    thumbnail.imagePath = thumbnailPath;\n    thumbnail.onclick = function () {\n        onHotSpotClicked(hotSpot, onFirstHotSpotClicked(hotSpot));\n    };\n    return thumbnail;\n}\nfunction onThumbnailClicked(thumbnailElement, needClick) {\n    thumbnailElement[0].children[0].classList.remove('thumbnail-unselected');\n    thumbnailElement[0].children[0].classList.add('thumbnail-selected');\n    thumbnailElement.siblings().each(function (index, domElement) {\n        domElement.children[0].classList.remove('thumbnail-selected');\n        domElement.children[0].classList.add('thumbnail-unselected');\n        if (domElement.thumbnailData) {\n            domElement.thumbnailData.isSelected = false;\n        }\n    });\n    var thumbnail = thumbnailElement[0].thumbnailData;\n    thumbnail.isSelected = true;\n    if (needClick) {\n        thumbnail.click();\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/pano.js\n// module id = 1\n// module chunks = 0","var PanoramaControls = function PanoramaControls(camera, domElement) {\n    this.enabled = false;\n    this.isAutoPlay = false;\n    var isPointDown = false;\n    var onPointerDownPointerX = 0, onPointerDownPointerY = 0, theta = 0, onPointerDownTheta = 0, phi = 0, onPointerDownPhi = 0;\n    var scope = this;\n    var touchSensitive = 3;\n    camera.target = new THREE.Vector3(0, 0, 0);\n    if (domElement == null || domElement == undefined) {\n        domElement = document;\n    }\n    domElement.addEventListener('mousedown', onMouseDown, false);\n    domElement.addEventListener('mousemove', onMouseMove, false);\n    domElement.addEventListener('mouseup', onMouseUp, false);\n    domElement.addEventListener('touchstart', onTouchDown, false);\n    domElement.addEventListener('touchend', onTouchUp, false);\n    domElement.addEventListener('touchmove', onTouchMove, false);\n    animate();\n    function onPointDown(x, y) {\n        isPointDown = true;\n        onPointerDownPointerX = x;\n        onPointerDownPointerY = y;\n        onPointerDownTheta = theta;\n        onPointerDownPhi = phi;\n    }\n    function onPointMove(x, y) {\n        if (isPointDown && scope.enabled) {\n            theta = (onPointerDownPointerX - x) * 0.1 + onPointerDownTheta;\n            phi = (y - onPointerDownPointerY) * 0.1 + onPointerDownPhi;\n        }\n    }\n    function onPointUp() {\n        isPointDown = false;\n    }\n    function onTouchDown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointDown(event.touches[0].pageX * touchSensitive, event.touches[0].pageY * touchSensitive);\n    }\n    function onTouchMove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointMove(event.touches[0].pageX * touchSensitive, event.touches[0].pageY * touchSensitive);\n    }\n    function onTouchUp(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        onPointUp();\n    }\n    function onMouseDown(event) {\n        event.preventDefault();\n        onPointDown(event.clientX, event.clientY);\n        document.addEventListener('mousemove', onMouseMove, false);\n        document.addEventListener('mouseup', onMouseUp, false);\n    }\n    function onMouseMove(event) {\n        event.preventDefault();\n        onPointMove(event.clientX, event.clientY);\n    }\n    function onMouseUp(event) {\n        event.preventDefault();\n        onPointUp();\n        document.removeEventListener('mousemove', onMouseMove, false);\n        document.removeEventListener('mouseup', onMouseUp, false);\n    }\n    function onMouseWheel(event) {\n        var fov = camera.fov + event.deltaY * 0.05;\n        fov = Math.max(30, Math.min(100, fov));\n        camera.fov = fov;\n        camera.updateProjectionMatrix();\n    }\n    this.updateRotation = function () {\n        theta = THREE.Math.radToDeg(-camera.rotation.y);\n        phi = THREE.Math.radToDeg(camera.rotation.x);\n        update();\n    };\n    function update() {\n        if (!scope.enabled) {\n            return;\n        }\n        if (scope.isAutoPlay && !isPointDown) {\n            theta += 0.05;\n        }\n        phi = Math.max(-18, Math.min(85, phi));\n        camera.rotation.x = THREE.Math.degToRad(phi);\n        camera.rotation.y = -THREE.Math.degToRad(theta);\n    }\n    function animate() {\n        requestAnimationFrame(animate);\n        update();\n    }\n};\nmodule.exports = PanoramaControls;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/panoCtrl.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}